
ReflowControllerFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004024  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f60  08004f60  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004f60  08004f60  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f60  08004f60  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f64  08004f64  00014f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000080  08004fe8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08004fe8  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e199  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212d  00000000  00000000  0002e242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00030370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00031308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e98  00000000  00000000  000321b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112d6  00000000  00000000  0004a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089935  00000000  00000000  0005b31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4c53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b8  00000000  00000000  000e4ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004118 	.word	0x08004118

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004118 	.word	0x08004118

0800014c <Encoder_Init>:
#include "Encoder.h"


void Encoder_Init(Encoder *enc, GPIO_TypeDef *GPIOx, uint16_t GPIO_PinA, uint16_t GPIO_PinB){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	460b      	mov	r3, r1
 800015c:	80fb      	strh	r3, [r7, #6]
 800015e:	4613      	mov	r3, r2
 8000160:	80bb      	strh	r3, [r7, #4]

	enc->pinA = GPIO_PinA;
 8000162:	68fb      	ldr	r3, [r7, #12]
 8000164:	88fa      	ldrh	r2, [r7, #6]
 8000166:	801a      	strh	r2, [r3, #0]
	enc->pinB = GPIO_PinB;
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	88ba      	ldrh	r2, [r7, #4]
 800016c:	805a      	strh	r2, [r3, #2]
	enc->aLastState = HAL_GPIO_ReadPin(GPIOx, enc->pinA);
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	881b      	ldrh	r3, [r3, #0]
 8000172:	4619      	mov	r1, r3
 8000174:	68b8      	ldr	r0, [r7, #8]
 8000176:	f001 fb39 	bl	80017ec <HAL_GPIO_ReadPin>
 800017a:	4603      	mov	r3, r0
 800017c:	461a      	mov	r2, r3
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	60da      	str	r2, [r3, #12]
}
 8000182:	bf00      	nop
 8000184:	3710      	adds	r7, #16
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}

0800018a <Encoder_Read>:

int Encoder_Read(Encoder *enc, GPIO_TypeDef *GPIOx){
 800018a:	b580      	push	{r7, lr}
 800018c:	b082      	sub	sp, #8
 800018e:	af00      	add	r7, sp, #0
 8000190:	6078      	str	r0, [r7, #4]
 8000192:	6039      	str	r1, [r7, #0]

	enc->aState = HAL_GPIO_ReadPin(GPIOx, enc->pinA);
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	881b      	ldrh	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	6838      	ldr	r0, [r7, #0]
 800019c:	f001 fb26 	bl	80017ec <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
 80001a2:	461a      	mov	r2, r3
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	605a      	str	r2, [r3, #4]
	enc->bState = HAL_GPIO_ReadPin(GPIOx, enc->pinB);
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	885b      	ldrh	r3, [r3, #2]
 80001ac:	4619      	mov	r1, r3
 80001ae:	6838      	ldr	r0, [r7, #0]
 80001b0:	f001 fb1c 	bl	80017ec <HAL_GPIO_ReadPin>
 80001b4:	4603      	mov	r3, r0
 80001b6:	461a      	mov	r2, r3
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	609a      	str	r2, [r3, #8]
	if (enc->aState != enc->aLastState){
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	685a      	ldr	r2, [r3, #4]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	68db      	ldr	r3, [r3, #12]
 80001c4:	429a      	cmp	r2, r3
 80001c6:	d022      	beq.n	800020e <Encoder_Read+0x84>
		if (enc->bState != enc->aState){
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	689a      	ldr	r2, [r3, #8]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	d00d      	beq.n	80001f0 <Encoder_Read+0x66>
			if (enc->aState == 0 && enc->bState == 1){
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d118      	bne.n	800020e <Encoder_Read+0x84>
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	2b01      	cmp	r3, #1
 80001e2:	d114      	bne.n	800020e <Encoder_Read+0x84>
				enc->aLastState = enc->aState;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	685a      	ldr	r2, [r3, #4]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	60da      	str	r2, [r3, #12]
				return 1;
 80001ec:	2301      	movs	r3, #1
 80001ee:	e013      	b.n	8000218 <Encoder_Read+0x8e>
			}
		}
		else {
			if (enc->aState == 0 && enc->aState == 0){
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d10a      	bne.n	800020e <Encoder_Read+0x84>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d106      	bne.n	800020e <Encoder_Read+0x84>
				enc->aLastState = enc->aState;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	685a      	ldr	r2, [r3, #4]
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	60da      	str	r2, [r3, #12]
				return -1;
 8000208:	f04f 33ff 	mov.w	r3, #4294967295
 800020c:	e004      	b.n	8000218 <Encoder_Read+0x8e>
			}
		}
	}
	enc->aLastState = enc->aState;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	685a      	ldr	r2, [r3, #4]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	60da      	str	r2, [r3, #12]
	return 0;
 8000216:	2300      	movs	r3, #0
}
 8000218:	4618      	mov	r0, r3
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}

08000220 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid){
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

	//clear controller variables
	pid->integrator = 0.0f;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f04f 0200 	mov.w	r2, #0
 800022e:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError = 0.0f;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f04f 0200 	mov.w	r2, #0
 8000236:	629a      	str	r2, [r3, #40]	; 0x28
	pid->differentiator = 0.0f;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f04f 0200 	mov.w	r2, #0
 800023e:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f04f 0200 	mov.w	r2, #0
 8000246:	631a      	str	r2, [r3, #48]	; 0x30
	pid->out = 0.0f;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f04f 0200 	mov.w	r2, #0
 800024e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
	...

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b096      	sub	sp, #88	; 0x58
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000262:	f000 ffdd 	bl	8001220 <HAL_Init>
  /* USER CODE BEGIN Init */
  PIDController pid;
  Profile profile;
  Encoder encoder;

  Encoder_Init(&encoder, GPIOB, ENCA_Pin, ENCB_Pin);
 8000266:	4638      	mov	r0, r7
 8000268:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800026c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000270:	4931      	ldr	r1, [pc, #196]	; (8000338 <main+0xdc>)
 8000272:	f7ff ff6b 	bl	800014c <Encoder_Init>
  PIDController_Init(&pid);
 8000276:	f107 0320 	add.w	r3, r7, #32
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ffd0 	bl	8000220 <PIDController_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f860 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 f980 	bl	8000588 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000288:	f000 f8a2 	bl	80003d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800028c:	f000 f8ce 	bl	800042c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000290:	f000 f904 	bl	800049c <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000294:	2104      	movs	r1, #4
 8000296:	4829      	ldr	r0, [pc, #164]	; (800033c <main+0xe0>)
 8000298:	f002 fd82 	bl	8002da0 <HAL_TIM_PWM_Start>
  SSD1306_Init();
 800029c:	f000 fb6a 	bl	8000974 <SSD1306_Init>
  menuScreen_static();
 80002a0:	f000 f9d8 	bl	8000654 <menuScreen_static>
  while (1)
  {
	  static screenState state = MENU;
	  switch(state){
 80002a4:	4b26      	ldr	r3, [pc, #152]	; (8000340 <main+0xe4>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b04      	cmp	r3, #4
 80002aa:	d8fb      	bhi.n	80002a4 <main+0x48>
 80002ac:	a201      	add	r2, pc, #4	; (adr r2, 80002b4 <main+0x58>)
 80002ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b2:	bf00      	nop
 80002b4:	080002c9 	.word	0x080002c9
 80002b8:	0800030b 	.word	0x0800030b
 80002bc:	080002db 	.word	0x080002db
 80002c0:	080002f3 	.word	0x080002f3
 80002c4:	08000325 	.word	0x08000325
	  case MENU:
		  state = menuScreen_dynamic(&encoder);
 80002c8:	463b      	mov	r3, r7
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f9ee 	bl	80006ac <menuScreen_dynamic>
 80002d0:	4603      	mov	r3, r0
 80002d2:	461a      	mov	r2, r3
 80002d4:	4b1a      	ldr	r3, [pc, #104]	; (8000340 <main+0xe4>)
 80002d6:	701a      	strb	r2, [r3, #0]
		  break;
 80002d8:	e02d      	b.n	8000336 <main+0xda>
	  case PROFILE:
		  state = profileScreen_dynamic(&profile, &encoder);
 80002da:	463a      	mov	r2, r7
 80002dc:	f107 0310 	add.w	r3, r7, #16
 80002e0:	4611      	mov	r1, r2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fa8c 	bl	8000800 <profileScreen_dynamic>
 80002e8:	4603      	mov	r3, r0
 80002ea:	461a      	mov	r2, r3
 80002ec:	4b14      	ldr	r3, [pc, #80]	; (8000340 <main+0xe4>)
 80002ee:	701a      	strb	r2, [r3, #0]
		  break;
 80002f0:	e021      	b.n	8000336 <main+0xda>
	  case PID:
		  state = pidScreen_dynamic(&pid, &encoder);
 80002f2:	463a      	mov	r2, r7
 80002f4:	f107 0320 	add.w	r3, r7, #32
 80002f8:	4611      	mov	r1, r2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fb20 	bl	8000940 <pidScreen_dynamic>
 8000300:	4603      	mov	r3, r0
 8000302:	461a      	mov	r2, r3
 8000304:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <main+0xe4>)
 8000306:	701a      	strb	r2, [r3, #0]
		  break;
 8000308:	e015      	b.n	8000336 <main+0xda>
	  case REFLOW:
		  state = reflowScreen_dynamic(&pid, &profile, &encoder);
 800030a:	463a      	mov	r2, r7
 800030c:	f107 0110 	add.w	r1, r7, #16
 8000310:	f107 0320 	add.w	r3, r7, #32
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fa47 	bl	80007a8 <reflowScreen_dynamic>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <main+0xe4>)
 8000320:	701a      	strb	r2, [r3, #0]
		  break;
 8000322:	e008      	b.n	8000336 <main+0xda>
	  case FINISH:
		  state = finishScreen_dynamic(&encoder);
 8000324:	463b      	mov	r3, r7
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fb15 	bl	8000956 <finishScreen_dynamic>
 800032c:	4603      	mov	r3, r0
 800032e:	461a      	mov	r2, r3
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <main+0xe4>)
 8000332:	701a      	strb	r2, [r3, #0]
		  break;
 8000334:	bf00      	nop
  {
 8000336:	e7b5      	b.n	80002a4 <main+0x48>
 8000338:	40010c00 	.word	0x40010c00
 800033c:	20000148 	.word	0x20000148
 8000340:	20000190 	.word	0x20000190

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b090      	sub	sp, #64	; 0x40
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	2228      	movs	r2, #40	; 0x28
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f003 fa5e 	bl	8003814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800036a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000374:	2301      	movs	r3, #1
 8000376:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	2302      	movs	r3, #2
 800037a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000380:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000382:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000386:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000388:	f107 0318 	add.w	r3, r7, #24
 800038c:	4618      	mov	r0, r3
 800038e:	f001 ffd5 	bl	800233c <HAL_RCC_OscConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000398:	f000 fae7 	bl	800096a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039c:	230f      	movs	r3, #15
 800039e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a0:	2302      	movs	r3, #2
 80003a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2102      	movs	r1, #2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 fa42 	bl	8002840 <HAL_RCC_ClockConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003c2:	f000 fad2 	bl	800096a <Error_Handler>
  }
}
 80003c6:	bf00      	nop
 80003c8:	3740      	adds	r7, #64	; 0x40
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_I2C1_Init+0x50>)
 80003d6:	4a13      	ldr	r2, [pc, #76]	; (8000424 <MX_I2C1_Init+0x54>)
 80003d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003da:	4b11      	ldr	r3, [pc, #68]	; (8000420 <MX_I2C1_Init+0x50>)
 80003dc:	4a12      	ldr	r2, [pc, #72]	; (8000428 <MX_I2C1_Init+0x58>)
 80003de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_I2C1_Init+0x50>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_I2C1_Init+0x50>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_I2C1_Init+0x50>)
 80003ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <MX_I2C1_Init+0x50>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_I2C1_Init+0x50>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000400:	4b07      	ldr	r3, [pc, #28]	; (8000420 <MX_I2C1_Init+0x50>)
 8000402:	2200      	movs	r2, #0
 8000404:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_I2C1_Init+0x50>)
 8000408:	2200      	movs	r2, #0
 800040a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <MX_I2C1_Init+0x50>)
 800040e:	f001 fa1d 	bl	800184c <HAL_I2C_Init>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000418:	f000 faa7 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000009c 	.word	0x2000009c
 8000424:	40005400 	.word	0x40005400
 8000428:	00061a80 	.word	0x00061a80

0800042c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <MX_SPI1_Init+0x68>)
 8000432:	4a19      	ldr	r2, [pc, #100]	; (8000498 <MX_SPI1_Init+0x6c>)
 8000434:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <MX_SPI1_Init+0x68>)
 8000438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800043c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <MX_SPI1_Init+0x68>)
 8000440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000444:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <MX_SPI1_Init+0x68>)
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <MX_SPI1_Init+0x68>)
 800044e:	2200      	movs	r2, #0
 8000450:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <MX_SPI1_Init+0x68>)
 8000454:	2200      	movs	r2, #0
 8000456:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000458:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <MX_SPI1_Init+0x68>)
 800045a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800045e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <MX_SPI1_Init+0x68>)
 8000462:	2210      	movs	r2, #16
 8000464:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <MX_SPI1_Init+0x68>)
 8000468:	2200      	movs	r2, #0
 800046a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <MX_SPI1_Init+0x68>)
 800046e:	2200      	movs	r2, #0
 8000470:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <MX_SPI1_Init+0x68>)
 8000474:	2200      	movs	r2, #0
 8000476:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <MX_SPI1_Init+0x68>)
 800047a:	220a      	movs	r2, #10
 800047c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <MX_SPI1_Init+0x68>)
 8000480:	f002 fb62 	bl	8002b48 <HAL_SPI_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800048a:	f000 fa6e 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	200000f0 	.word	0x200000f0
 8000498:	40013000 	.word	0x40013000

0800049c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08e      	sub	sp, #56	; 0x38
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b0:	f107 0320 	add.w	r3, r7, #32
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
 80004c6:	611a      	str	r2, [r3, #16]
 80004c8:	615a      	str	r2, [r3, #20]
 80004ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004cc:	4b2d      	ldr	r3, [pc, #180]	; (8000584 <MX_TIM2_Init+0xe8>)
 80004ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80004d4:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <MX_TIM2_Init+0xe8>)
 80004d6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80004da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004dc:	4b29      	ldr	r3, [pc, #164]	; (8000584 <MX_TIM2_Init+0xe8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80004e2:	4b28      	ldr	r3, [pc, #160]	; (8000584 <MX_TIM2_Init+0xe8>)
 80004e4:	2263      	movs	r2, #99	; 0x63
 80004e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e8:	4b26      	ldr	r3, [pc, #152]	; (8000584 <MX_TIM2_Init+0xe8>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004ee:	4b25      	ldr	r3, [pc, #148]	; (8000584 <MX_TIM2_Init+0xe8>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004f4:	4823      	ldr	r0, [pc, #140]	; (8000584 <MX_TIM2_Init+0xe8>)
 80004f6:	f002 fbab 	bl	8002c50 <HAL_TIM_Base_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000500:	f000 fa33 	bl	800096a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000508:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800050a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800050e:	4619      	mov	r1, r3
 8000510:	481c      	ldr	r0, [pc, #112]	; (8000584 <MX_TIM2_Init+0xe8>)
 8000512:	f002 fd9f 	bl	8003054 <HAL_TIM_ConfigClockSource>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800051c:	f000 fa25 	bl	800096a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000520:	4818      	ldr	r0, [pc, #96]	; (8000584 <MX_TIM2_Init+0xe8>)
 8000522:	f002 fbe4 	bl	8002cee <HAL_TIM_PWM_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800052c:	f000 fa1d 	bl	800096a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000530:	2300      	movs	r3, #0
 8000532:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000538:	f107 0320 	add.w	r3, r7, #32
 800053c:	4619      	mov	r1, r3
 800053e:	4811      	ldr	r0, [pc, #68]	; (8000584 <MX_TIM2_Init+0xe8>)
 8000540:	f003 f8e6 	bl	8003710 <HAL_TIMEx_MasterConfigSynchronization>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800054a:	f000 fa0e 	bl	800096a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800054e:	2360      	movs	r3, #96	; 0x60
 8000550:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2204      	movs	r2, #4
 8000562:	4619      	mov	r1, r3
 8000564:	4807      	ldr	r0, [pc, #28]	; (8000584 <MX_TIM2_Init+0xe8>)
 8000566:	f002 fcb7 	bl	8002ed8 <HAL_TIM_PWM_ConfigChannel>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000570:	f000 f9fb 	bl	800096a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <MX_TIM2_Init+0xe8>)
 8000576:	f000 fd99 	bl	80010ac <HAL_TIM_MspPostInit>

}
 800057a:	bf00      	nop
 800057c:	3738      	adds	r7, #56	; 0x38
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000148 	.word	0x20000148

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800059c:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <MX_GPIO_Init+0xc0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a29      	ldr	r2, [pc, #164]	; (8000648 <MX_GPIO_Init+0xc0>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b27      	ldr	r3, [pc, #156]	; (8000648 <MX_GPIO_Init+0xc0>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0320 	and.w	r3, r3, #32
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <MX_GPIO_Init+0xc0>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a23      	ldr	r2, [pc, #140]	; (8000648 <MX_GPIO_Init+0xc0>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <MX_GPIO_Init+0xc0>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <MX_GPIO_Init+0xc0>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a1d      	ldr	r2, [pc, #116]	; (8000648 <MX_GPIO_Init+0xc0>)
 80005d2:	f043 0308 	orr.w	r3, r3, #8
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_GPIO_Init+0xc0>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0308 	and.w	r3, r3, #8
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TMP_CSS_GPIO_Port, TMP_CSS_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2110      	movs	r1, #16
 80005e8:	4818      	ldr	r0, [pc, #96]	; (800064c <MX_GPIO_Init+0xc4>)
 80005ea:	f001 f916 	bl	800181a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TMP_CSS_Pin */
  GPIO_InitStruct.Pin = TMP_CSS_Pin;
 80005ee:	2310      	movs	r3, #16
 80005f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2302      	movs	r3, #2
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TMP_CSS_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	4619      	mov	r1, r3
 8000604:	4811      	ldr	r0, [pc, #68]	; (800064c <MX_GPIO_Init+0xc4>)
 8000606:	f000 ff75 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCA_Pin ENCB_Pin */
  GPIO_InitStruct.Pin = ENCA_Pin|ENCB_Pin;
 800060a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800060e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000614:	2301      	movs	r3, #1
 8000616:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_GPIO_Init+0xc8>)
 8000620:	f000 ff68 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RB1_Pin */
  GPIO_InitStruct.Pin = RB1_Pin;
 8000624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RB1_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	4619      	mov	r1, r3
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_GPIO_Init+0xc4>)
 800063a:	f000 ff5b 	bl	80014f4 <HAL_GPIO_Init>

}
 800063e:	bf00      	nop
 8000640:	3720      	adds	r7, #32
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000
 800064c:	40010800 	.word	0x40010800
 8000650:	40010c00 	.word	0x40010c00

08000654 <menuScreen_static>:

/* USER CODE BEGIN 4 */
void menuScreen_static(){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	  SSD1306_Clear();
 8000658:	f000 fbaf 	bl	8000dba <SSD1306_Clear>
	  SSD1306_GotoXY (0,3);
 800065c:	2103      	movs	r1, #3
 800065e:	2000      	movs	r0, #0
 8000660:	f000 faf0 	bl	8000c44 <SSD1306_GotoXY>
	  SSD1306_Puts ("  REFLOW", &Font_11x18, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	490d      	ldr	r1, [pc, #52]	; (800069c <menuScreen_static+0x48>)
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <menuScreen_static+0x4c>)
 800066a:	f000 fb81 	bl	8000d70 <SSD1306_Puts>
	  SSD1306_GotoXY (0, 24);
 800066e:	2118      	movs	r1, #24
 8000670:	2000      	movs	r0, #0
 8000672:	f000 fae7 	bl	8000c44 <SSD1306_GotoXY>
	  SSD1306_Puts ("  PROFILE", &Font_11x18, 1);
 8000676:	2201      	movs	r2, #1
 8000678:	4908      	ldr	r1, [pc, #32]	; (800069c <menuScreen_static+0x48>)
 800067a:	480a      	ldr	r0, [pc, #40]	; (80006a4 <menuScreen_static+0x50>)
 800067c:	f000 fb78 	bl	8000d70 <SSD1306_Puts>
	  SSD1306_GotoXY (0, 45);
 8000680:	212d      	movs	r1, #45	; 0x2d
 8000682:	2000      	movs	r0, #0
 8000684:	f000 fade 	bl	8000c44 <SSD1306_GotoXY>
	  SSD1306_Puts ("  PID", &Font_11x18, 1);
 8000688:	2201      	movs	r2, #1
 800068a:	4904      	ldr	r1, [pc, #16]	; (800069c <menuScreen_static+0x48>)
 800068c:	4806      	ldr	r0, [pc, #24]	; (80006a8 <menuScreen_static+0x54>)
 800068e:	f000 fb6f 	bl	8000d70 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000692:	f000 fa33 	bl	8000afc <SSD1306_UpdateScreen>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000000 	.word	0x20000000
 80006a0:	08004130 	.word	0x08004130
 80006a4:	0800413c 	.word	0x0800413c
 80006a8:	08004148 	.word	0x08004148

080006ac <menuScreen_dynamic>:
screenState menuScreen_dynamic(Encoder *encoder){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	static int menuSelect = 3;
	int encRead = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
	encRead = Encoder_Read(encoder, GPIOB);
 80006b8:	4935      	ldr	r1, [pc, #212]	; (8000790 <menuScreen_dynamic+0xe4>)
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff fd65 	bl	800018a <Encoder_Read>
 80006c0:	60f8      	str	r0, [r7, #12]
	if (encRead != 0){
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d043      	beq.n	8000750 <menuScreen_dynamic+0xa4>
		if ((encRead == 1) && (menuSelect < 45)){
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d109      	bne.n	80006e2 <menuScreen_dynamic+0x36>
 80006ce:	4b31      	ldr	r3, [pc, #196]	; (8000794 <menuScreen_dynamic+0xe8>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b2c      	cmp	r3, #44	; 0x2c
 80006d4:	dc05      	bgt.n	80006e2 <menuScreen_dynamic+0x36>
			menuSelect += 21;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <menuScreen_dynamic+0xe8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3315      	adds	r3, #21
 80006dc:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <menuScreen_dynamic+0xe8>)
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	e00c      	b.n	80006fc <menuScreen_dynamic+0x50>
		}
		else if ((encRead == -1) && (menuSelect > 3)){
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e8:	d108      	bne.n	80006fc <menuScreen_dynamic+0x50>
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <menuScreen_dynamic+0xe8>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	dd04      	ble.n	80006fc <menuScreen_dynamic+0x50>
			menuSelect -= 21;
 80006f2:	4b28      	ldr	r3, [pc, #160]	; (8000794 <menuScreen_dynamic+0xe8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	3b15      	subs	r3, #21
 80006f8:	4a26      	ldr	r2, [pc, #152]	; (8000794 <menuScreen_dynamic+0xe8>)
 80006fa:	6013      	str	r3, [r2, #0]
		}
		SSD1306_GotoXY (0, menuSelect);
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <menuScreen_dynamic+0xe8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	b29b      	uxth	r3, r3
 8000702:	4619      	mov	r1, r3
 8000704:	2000      	movs	r0, #0
 8000706:	f000 fa9d 	bl	8000c44 <SSD1306_GotoXY>
		SSD1306_Puts (">", &Font_11x18, 1);
 800070a:	2201      	movs	r2, #1
 800070c:	4922      	ldr	r1, [pc, #136]	; (8000798 <menuScreen_dynamic+0xec>)
 800070e:	4823      	ldr	r0, [pc, #140]	; (800079c <menuScreen_dynamic+0xf0>)
 8000710:	f000 fb2e 	bl	8000d70 <SSD1306_Puts>
		SSD1306_GotoXY (0, menuSelect - 21);
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <menuScreen_dynamic+0xe8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	b29b      	uxth	r3, r3
 800071a:	3b15      	subs	r3, #21
 800071c:	b29b      	uxth	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	2000      	movs	r0, #0
 8000722:	f000 fa8f 	bl	8000c44 <SSD1306_GotoXY>
		SSD1306_Puts (" ", &Font_11x18, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	491b      	ldr	r1, [pc, #108]	; (8000798 <menuScreen_dynamic+0xec>)
 800072a:	481d      	ldr	r0, [pc, #116]	; (80007a0 <menuScreen_dynamic+0xf4>)
 800072c:	f000 fb20 	bl	8000d70 <SSD1306_Puts>
		SSD1306_GotoXY (0, menuSelect + 21);
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <menuScreen_dynamic+0xe8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	b29b      	uxth	r3, r3
 8000736:	3315      	adds	r3, #21
 8000738:	b29b      	uxth	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fa81 	bl	8000c44 <SSD1306_GotoXY>
		SSD1306_Puts (" ", &Font_11x18, 1);
 8000742:	2201      	movs	r2, #1
 8000744:	4914      	ldr	r1, [pc, #80]	; (8000798 <menuScreen_dynamic+0xec>)
 8000746:	4816      	ldr	r0, [pc, #88]	; (80007a0 <menuScreen_dynamic+0xf4>)
 8000748:	f000 fb12 	bl	8000d70 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800074c:	f000 f9d6 	bl	8000afc <SSD1306_UpdateScreen>
	}
	if (HAL_GPIO_ReadPin(RB1_GPIO_Port, RB1_Pin) == GPIO_PIN_RESET){
 8000750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000754:	4813      	ldr	r0, [pc, #76]	; (80007a4 <menuScreen_dynamic+0xf8>)
 8000756:	f001 f849 	bl	80017ec <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d111      	bne.n	8000784 <menuScreen_dynamic+0xd8>
		if (menuSelect == 3){
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <menuScreen_dynamic+0xe8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b03      	cmp	r3, #3
 8000766:	d101      	bne.n	800076c <menuScreen_dynamic+0xc0>
			return REFLOW;
 8000768:	2301      	movs	r3, #1
 800076a:	e00c      	b.n	8000786 <menuScreen_dynamic+0xda>
		}
		else if (menuSelect == 24){
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <menuScreen_dynamic+0xe8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b18      	cmp	r3, #24
 8000772:	d101      	bne.n	8000778 <menuScreen_dynamic+0xcc>
			return PROFILE;
 8000774:	2302      	movs	r3, #2
 8000776:	e006      	b.n	8000786 <menuScreen_dynamic+0xda>
		}
		else if (menuSelect == 45){
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <menuScreen_dynamic+0xe8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b2d      	cmp	r3, #45	; 0x2d
 800077e:	d101      	bne.n	8000784 <menuScreen_dynamic+0xd8>
			return PID;
 8000780:	2303      	movs	r3, #3
 8000782:	e000      	b.n	8000786 <menuScreen_dynamic+0xda>
		}
	}
	return MENU;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40010c00 	.word	0x40010c00
 8000794:	20000008 	.word	0x20000008
 8000798:	20000000 	.word	0x20000000
 800079c:	08004150 	.word	0x08004150
 80007a0:	08004154 	.word	0x08004154
 80007a4:	40010800 	.word	0x40010800

080007a8 <reflowScreen_dynamic>:
void reflowScreen_static(){
	SSD1306_Clear();

}
screenState reflowScreen_dynamic(PIDController *pid, Profile *profile, Encoder *encoder){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
	static uint16_t time = 1;
	if (HAL_GPIO_ReadPin(RB1_GPIO_Port, RB1_Pin) == GPIO_PIN_RESET){
 80007b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <reflowScreen_dynamic+0x50>)
 80007ba:	f001 f817 	bl	80017ec <HAL_GPIO_ReadPin>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d103      	bne.n	80007cc <reflowScreen_dynamic+0x24>
		SSD1306_Clear();
 80007c4:	f000 faf9 	bl	8000dba <SSD1306_Clear>
		return FINISH;
 80007c8:	2304      	movs	r3, #4
 80007ca:	e011      	b.n	80007f0 <reflowScreen_dynamic+0x48>
	}
	HAL_Delay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d0:	f000 fd88 	bl	80012e4 <HAL_Delay>

	// NEED TO IMPLIMENT SPI COMMUNICATION WITH THERMOCOUPLE
	SSD1306_DrawPixel(time, time, SSD1306_COLOR_WHITE);
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <reflowScreen_dynamic+0x54>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	4a08      	ldr	r2, [pc, #32]	; (80007fc <reflowScreen_dynamic+0x54>)
 80007da:	8811      	ldrh	r1, [r2, #0]
 80007dc:	2201      	movs	r2, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f9d2 	bl	8000b88 <SSD1306_DrawPixel>
	time++;
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <reflowScreen_dynamic+0x54>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	3301      	adds	r3, #1
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <reflowScreen_dynamic+0x54>)
 80007ee:	801a      	strh	r2, [r3, #0]

}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40010800 	.word	0x40010800
 80007fc:	2000000c 	.word	0x2000000c

08000800 <profileScreen_dynamic>:
	SSD1306_GotoXY (0, 45);
	sprintf(profileString, "  Soak Temp: %u", profile->peakTemp);
	SSD1306_Puts (profileString, &Font_11x18, 1);
	SSD1306_UpdateScreen();
}
screenState profileScreen_dynamic(Profile *profile, Encoder *encoder){
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
	static uint16_t profileSelect = 3;
	char profileString[20];
	if (profileSelect == 3){
 800080a:	4b46      	ldr	r3, [pc, #280]	; (8000924 <profileScreen_dynamic+0x124>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	2b03      	cmp	r3, #3
 8000810:	d129      	bne.n	8000866 <profileScreen_dynamic+0x66>
		profile->soakTemp += Encoder_Read(encoder, GPIOB);
 8000812:	4945      	ldr	r1, [pc, #276]	; (8000928 <profileScreen_dynamic+0x128>)
 8000814:	6838      	ldr	r0, [r7, #0]
 8000816:	f7ff fcb8 	bl	800018a <Encoder_Read>
 800081a:	4602      	mov	r2, r0
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	441a      	add	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	601a      	str	r2, [r3, #0]
		SSD1306_GotoXY (0,3);
 8000826:	2103      	movs	r1, #3
 8000828:	2000      	movs	r0, #0
 800082a:	f000 fa0b 	bl	8000c44 <SSD1306_GotoXY>
		sprintf(profileString, "> Soak Temp: %u", profile->soakTemp);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	493d      	ldr	r1, [pc, #244]	; (800092c <profileScreen_dynamic+0x12c>)
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fff3 	bl	8003824 <siprintf>
		SSD1306_Puts (profileString, &Font_11x18, 1);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	2201      	movs	r2, #1
 8000844:	493a      	ldr	r1, [pc, #232]	; (8000930 <profileScreen_dynamic+0x130>)
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fa92 	bl	8000d70 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 800084c:	f000 f956 	bl	8000afc <SSD1306_UpdateScreen>
		if ((HAL_GPIO_ReadPin(RB1_GPIO_Port, RB1_Pin) == GPIO_PIN_RESET)){
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	4837      	ldr	r0, [pc, #220]	; (8000934 <profileScreen_dynamic+0x134>)
 8000856:	f000 ffc9 	bl	80017ec <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <profileScreen_dynamic+0x66>
			profileSelect = 24;
 8000860:	4b30      	ldr	r3, [pc, #192]	; (8000924 <profileScreen_dynamic+0x124>)
 8000862:	2218      	movs	r2, #24
 8000864:	801a      	strh	r2, [r3, #0]
		}
	}
	if (profileSelect == 24){
 8000866:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <profileScreen_dynamic+0x124>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	2b18      	cmp	r3, #24
 800086c:	d129      	bne.n	80008c2 <profileScreen_dynamic+0xc2>
		profile->soakTime += Encoder_Read(encoder, GPIOB);
 800086e:	492e      	ldr	r1, [pc, #184]	; (8000928 <profileScreen_dynamic+0x128>)
 8000870:	6838      	ldr	r0, [r7, #0]
 8000872:	f7ff fc8a 	bl	800018a <Encoder_Read>
 8000876:	4602      	mov	r2, r0
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	441a      	add	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	605a      	str	r2, [r3, #4]
		SSD1306_GotoXY (0,24);
 8000882:	2118      	movs	r1, #24
 8000884:	2000      	movs	r0, #0
 8000886:	f000 f9dd 	bl	8000c44 <SSD1306_GotoXY>
		sprintf(profileString, "> Soak Time: %u", profile->soakTime);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	4929      	ldr	r1, [pc, #164]	; (8000938 <profileScreen_dynamic+0x138>)
 8000894:	4618      	mov	r0, r3
 8000896:	f002 ffc5 	bl	8003824 <siprintf>
		SSD1306_Puts (profileString, &Font_11x18, 1);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2201      	movs	r2, #1
 80008a0:	4923      	ldr	r1, [pc, #140]	; (8000930 <profileScreen_dynamic+0x130>)
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fa64 	bl	8000d70 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80008a8:	f000 f928 	bl	8000afc <SSD1306_UpdateScreen>
		if ((HAL_GPIO_ReadPin(RB1_GPIO_Port, RB1_Pin) == GPIO_PIN_RESET)){
 80008ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b0:	4820      	ldr	r0, [pc, #128]	; (8000934 <profileScreen_dynamic+0x134>)
 80008b2:	f000 ff9b 	bl	80017ec <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <profileScreen_dynamic+0xc2>
			profileSelect = 45;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <profileScreen_dynamic+0x124>)
 80008be:	222d      	movs	r2, #45	; 0x2d
 80008c0:	801a      	strh	r2, [r3, #0]
		}
	}
	if (profileSelect == 45){
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <profileScreen_dynamic+0x124>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	2b2d      	cmp	r3, #45	; 0x2d
 80008c8:	d128      	bne.n	800091c <profileScreen_dynamic+0x11c>
		profile->peakTemp += Encoder_Read(encoder, GPIOB);
 80008ca:	4917      	ldr	r1, [pc, #92]	; (8000928 <profileScreen_dynamic+0x128>)
 80008cc:	6838      	ldr	r0, [r7, #0]
 80008ce:	f7ff fc5c 	bl	800018a <Encoder_Read>
 80008d2:	4602      	mov	r2, r0
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	441a      	add	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	609a      	str	r2, [r3, #8]
		SSD1306_GotoXY (0,45);
 80008de:	212d      	movs	r1, #45	; 0x2d
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 f9af 	bl	8000c44 <SSD1306_GotoXY>
		sprintf(profileString, "> Peak Temp: %u", profile->peakTemp);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4913      	ldr	r1, [pc, #76]	; (800093c <profileScreen_dynamic+0x13c>)
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 ff97 	bl	8003824 <siprintf>
		SSD1306_Puts (profileString, &Font_11x18, 1);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	2201      	movs	r2, #1
 80008fc:	490c      	ldr	r1, [pc, #48]	; (8000930 <profileScreen_dynamic+0x130>)
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fa36 	bl	8000d70 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000904:	f000 f8fa 	bl	8000afc <SSD1306_UpdateScreen>
		if ((HAL_GPIO_ReadPin(RB1_GPIO_Port, RB1_Pin) == GPIO_PIN_RESET)){
 8000908:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090c:	4809      	ldr	r0, [pc, #36]	; (8000934 <profileScreen_dynamic+0x134>)
 800090e:	f000 ff6d 	bl	80017ec <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d101      	bne.n	800091c <profileScreen_dynamic+0x11c>
			return MENU;
 8000918:	2300      	movs	r3, #0
 800091a:	e7ff      	b.n	800091c <profileScreen_dynamic+0x11c>
		}
	}
}
 800091c:	4618      	mov	r0, r3
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000000e 	.word	0x2000000e
 8000928:	40010c00 	.word	0x40010c00
 800092c:	08004178 	.word	0x08004178
 8000930:	20000000 	.word	0x20000000
 8000934:	40010800 	.word	0x40010800
 8000938:	08004188 	.word	0x08004188
 800093c:	08004198 	.word	0x08004198

08000940 <pidScreen_dynamic>:
void pidScreen_static(PIDController *pid){


}
screenState pidScreen_dynamic(PIDController *pid, Encoder *encoder){
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]


}
 800094a:	bf00      	nop
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <finishScreen_dynamic>:
screenState finishScreen_dynamic(Encoder *encoder){
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]


}
 800095e:	bf00      	nop
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096e:	b672      	cpsid	i
}
 8000970:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000972:	e7fe      	b.n	8000972 <Error_Handler+0x8>

08000974 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800097a:	f000 fa27 	bl	8000dcc <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800097e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000982:	2201      	movs	r2, #1
 8000984:	2178      	movs	r1, #120	; 0x78
 8000986:	485b      	ldr	r0, [pc, #364]	; (8000af4 <SSD1306_Init+0x180>)
 8000988:	f001 f9a2 	bl	8001cd0 <HAL_I2C_IsDeviceReady>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000992:	2300      	movs	r3, #0
 8000994:	e0a9      	b.n	8000aea <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000996:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800099a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800099c:	e002      	b.n	80009a4 <SSD1306_Init+0x30>
		p--;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1f9      	bne.n	800099e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80009aa:	22ae      	movs	r2, #174	; 0xae
 80009ac:	2100      	movs	r1, #0
 80009ae:	2078      	movs	r0, #120	; 0x78
 80009b0:	f000 fa86 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80009b4:	2220      	movs	r2, #32
 80009b6:	2100      	movs	r1, #0
 80009b8:	2078      	movs	r0, #120	; 0x78
 80009ba:	f000 fa81 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80009be:	2210      	movs	r2, #16
 80009c0:	2100      	movs	r1, #0
 80009c2:	2078      	movs	r0, #120	; 0x78
 80009c4:	f000 fa7c 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80009c8:	22b0      	movs	r2, #176	; 0xb0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2078      	movs	r0, #120	; 0x78
 80009ce:	f000 fa77 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80009d2:	22c8      	movs	r2, #200	; 0xc8
 80009d4:	2100      	movs	r1, #0
 80009d6:	2078      	movs	r0, #120	; 0x78
 80009d8:	f000 fa72 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2078      	movs	r0, #120	; 0x78
 80009e2:	f000 fa6d 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80009e6:	2210      	movs	r2, #16
 80009e8:	2100      	movs	r1, #0
 80009ea:	2078      	movs	r0, #120	; 0x78
 80009ec:	f000 fa68 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80009f0:	2240      	movs	r2, #64	; 0x40
 80009f2:	2100      	movs	r1, #0
 80009f4:	2078      	movs	r0, #120	; 0x78
 80009f6:	f000 fa63 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80009fa:	2281      	movs	r2, #129	; 0x81
 80009fc:	2100      	movs	r1, #0
 80009fe:	2078      	movs	r0, #120	; 0x78
 8000a00:	f000 fa5e 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000a04:	22ff      	movs	r2, #255	; 0xff
 8000a06:	2100      	movs	r1, #0
 8000a08:	2078      	movs	r0, #120	; 0x78
 8000a0a:	f000 fa59 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000a0e:	22a1      	movs	r2, #161	; 0xa1
 8000a10:	2100      	movs	r1, #0
 8000a12:	2078      	movs	r0, #120	; 0x78
 8000a14:	f000 fa54 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000a18:	22a6      	movs	r2, #166	; 0xa6
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2078      	movs	r0, #120	; 0x78
 8000a1e:	f000 fa4f 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000a22:	22a8      	movs	r2, #168	; 0xa8
 8000a24:	2100      	movs	r1, #0
 8000a26:	2078      	movs	r0, #120	; 0x78
 8000a28:	f000 fa4a 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000a2c:	223f      	movs	r2, #63	; 0x3f
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2078      	movs	r0, #120	; 0x78
 8000a32:	f000 fa45 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a36:	22a4      	movs	r2, #164	; 0xa4
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2078      	movs	r0, #120	; 0x78
 8000a3c:	f000 fa40 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000a40:	22d3      	movs	r2, #211	; 0xd3
 8000a42:	2100      	movs	r1, #0
 8000a44:	2078      	movs	r0, #120	; 0x78
 8000a46:	f000 fa3b 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2078      	movs	r0, #120	; 0x78
 8000a50:	f000 fa36 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a54:	22d5      	movs	r2, #213	; 0xd5
 8000a56:	2100      	movs	r1, #0
 8000a58:	2078      	movs	r0, #120	; 0x78
 8000a5a:	f000 fa31 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000a5e:	22f0      	movs	r2, #240	; 0xf0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2078      	movs	r0, #120	; 0x78
 8000a64:	f000 fa2c 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000a68:	22d9      	movs	r2, #217	; 0xd9
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2078      	movs	r0, #120	; 0x78
 8000a6e:	f000 fa27 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000a72:	2222      	movs	r2, #34	; 0x22
 8000a74:	2100      	movs	r1, #0
 8000a76:	2078      	movs	r0, #120	; 0x78
 8000a78:	f000 fa22 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000a7c:	22da      	movs	r2, #218	; 0xda
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2078      	movs	r0, #120	; 0x78
 8000a82:	f000 fa1d 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000a86:	2212      	movs	r2, #18
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2078      	movs	r0, #120	; 0x78
 8000a8c:	f000 fa18 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000a90:	22db      	movs	r2, #219	; 0xdb
 8000a92:	2100      	movs	r1, #0
 8000a94:	2078      	movs	r0, #120	; 0x78
 8000a96:	f000 fa13 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2078      	movs	r0, #120	; 0x78
 8000aa0:	f000 fa0e 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000aa4:	228d      	movs	r2, #141	; 0x8d
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2078      	movs	r0, #120	; 0x78
 8000aaa:	f000 fa09 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000aae:	2214      	movs	r2, #20
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2078      	movs	r0, #120	; 0x78
 8000ab4:	f000 fa04 	bl	8000ec0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000ab8:	22af      	movs	r2, #175	; 0xaf
 8000aba:	2100      	movs	r1, #0
 8000abc:	2078      	movs	r0, #120	; 0x78
 8000abe:	f000 f9ff 	bl	8000ec0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000ac2:	222e      	movs	r2, #46	; 0x2e
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2078      	movs	r0, #120	; 0x78
 8000ac8:	f000 f9fa 	bl	8000ec0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 f843 	bl	8000b58 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000ad2:	f000 f813 	bl	8000afc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <SSD1306_Init+0x184>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <SSD1306_Init+0x184>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <SSD1306_Init+0x184>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000ae8:	2301      	movs	r3, #1
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000009c 	.word	0x2000009c
 8000af8:	20000594 	.word	0x20000594

08000afc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000b02:	2300      	movs	r3, #0
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	e01d      	b.n	8000b44 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	3b50      	subs	r3, #80	; 0x50
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	2100      	movs	r1, #0
 8000b12:	2078      	movs	r0, #120	; 0x78
 8000b14:	f000 f9d4 	bl	8000ec0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2078      	movs	r0, #120	; 0x78
 8000b1e:	f000 f9cf 	bl	8000ec0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000b22:	2210      	movs	r2, #16
 8000b24:	2100      	movs	r1, #0
 8000b26:	2078      	movs	r0, #120	; 0x78
 8000b28:	f000 f9ca 	bl	8000ec0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	01db      	lsls	r3, r3, #7
 8000b30:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <SSD1306_UpdateScreen+0x58>)
 8000b32:	441a      	add	r2, r3
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	2078      	movs	r0, #120	; 0x78
 8000b3a:	f000 f95b 	bl	8000df4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	3301      	adds	r3, #1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	2b07      	cmp	r3, #7
 8000b48:	d9de      	bls.n	8000b08 <SSD1306_UpdateScreen+0xc>
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000194 	.word	0x20000194

08000b58 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <SSD1306_Fill+0x14>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e000      	b.n	8000b6e <SSD1306_Fill+0x16>
 8000b6c:	23ff      	movs	r3, #255	; 0xff
 8000b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b72:	4619      	mov	r1, r3
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <SSD1306_Fill+0x2c>)
 8000b76:	f002 fe4d 	bl	8003814 <memset>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000194 	.word	0x20000194

08000b88 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	80fb      	strh	r3, [r7, #6]
 8000b92:	460b      	mov	r3, r1
 8000b94:	80bb      	strh	r3, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	70fb      	strb	r3, [r7, #3]
	if (
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b9e:	d848      	bhi.n	8000c32 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000ba0:	88bb      	ldrh	r3, [r7, #4]
 8000ba2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ba4:	d845      	bhi.n	8000c32 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000ba6:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <SSD1306_DrawPixel+0xb4>)
 8000ba8:	791b      	ldrb	r3, [r3, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d006      	beq.n	8000bbc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	bf0c      	ite	eq
 8000bb4:	2301      	moveq	r3, #1
 8000bb6:	2300      	movne	r3, #0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000bbc:	78fb      	ldrb	r3, [r7, #3]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d11a      	bne.n	8000bf8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	88bb      	ldrh	r3, [r7, #4]
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	b298      	uxth	r0, r3
 8000bca:	4603      	mov	r3, r0
 8000bcc:	01db      	lsls	r3, r3, #7
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <SSD1306_DrawPixel+0xb8>)
 8000bd2:	5cd3      	ldrb	r3, [r2, r3]
 8000bd4:	b25a      	sxtb	r2, r3
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	b259      	sxtb	r1, r3
 8000be8:	88fa      	ldrh	r2, [r7, #6]
 8000bea:	4603      	mov	r3, r0
 8000bec:	01db      	lsls	r3, r3, #7
 8000bee:	4413      	add	r3, r2
 8000bf0:	b2c9      	uxtb	r1, r1
 8000bf2:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <SSD1306_DrawPixel+0xb8>)
 8000bf4:	54d1      	strb	r1, [r2, r3]
 8000bf6:	e01d      	b.n	8000c34 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000bf8:	88fa      	ldrh	r2, [r7, #6]
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	08db      	lsrs	r3, r3, #3
 8000bfe:	b298      	uxth	r0, r3
 8000c00:	4603      	mov	r3, r0
 8000c02:	01db      	lsls	r3, r3, #7
 8000c04:	4413      	add	r3, r2
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <SSD1306_DrawPixel+0xb8>)
 8000c08:	5cd3      	ldrb	r3, [r2, r3]
 8000c0a:	b25a      	sxtb	r2, r3
 8000c0c:	88bb      	ldrh	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	2101      	movs	r1, #1
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	b25b      	sxtb	r3, r3
 8000c1e:	4013      	ands	r3, r2
 8000c20:	b259      	sxtb	r1, r3
 8000c22:	88fa      	ldrh	r2, [r7, #6]
 8000c24:	4603      	mov	r3, r0
 8000c26:	01db      	lsls	r3, r3, #7
 8000c28:	4413      	add	r3, r2
 8000c2a:	b2c9      	uxtb	r1, r1
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <SSD1306_DrawPixel+0xb8>)
 8000c2e:	54d1      	strb	r1, [r2, r3]
 8000c30:	e000      	b.n	8000c34 <SSD1306_DrawPixel+0xac>
		return;
 8000c32:	bf00      	nop
	}
}
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	20000594 	.word	0x20000594
 8000c40:	20000194 	.word	0x20000194

08000c44 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	80fb      	strh	r3, [r7, #6]
 8000c50:	4613      	mov	r3, r2
 8000c52:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SSD1306_GotoXY+0x28>)
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <SSD1306_GotoXY+0x28>)
 8000c5c:	88bb      	ldrh	r3, [r7, #4]
 8000c5e:	8053      	strh	r3, [r2, #2]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000594 	.word	0x20000594

08000c70 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c80:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <SSD1306_Putc+0xfc>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
	if (
 8000c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8000c8e:	dc07      	bgt.n	8000ca0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000c90:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <SSD1306_Putc+0xfc>)
 8000c92:	885b      	ldrh	r3, [r3, #2]
 8000c94:	461a      	mov	r2, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	785b      	ldrb	r3, [r3, #1]
 8000c9a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c9c:	2b3f      	cmp	r3, #63	; 0x3f
 8000c9e:	dd01      	ble.n	8000ca4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e05e      	b.n	8000d62 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	e04b      	b.n	8000d42 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	3b20      	subs	r3, #32
 8000cb2:	6839      	ldr	r1, [r7, #0]
 8000cb4:	7849      	ldrb	r1, [r1, #1]
 8000cb6:	fb01 f303 	mul.w	r3, r1, r3
 8000cba:	4619      	mov	r1, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	440b      	add	r3, r1
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	e030      	b.n	8000d30 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d010      	beq.n	8000d00 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <SSD1306_Putc+0xfc>)
 8000ce0:	881a      	ldrh	r2, [r3, #0]
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b298      	uxth	r0, r3
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <SSD1306_Putc+0xfc>)
 8000cec:	885a      	ldrh	r2, [r3, #2]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	79ba      	ldrb	r2, [r7, #6]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f7ff ff45 	bl	8000b88 <SSD1306_DrawPixel>
 8000cfe:	e014      	b.n	8000d2a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <SSD1306_Putc+0xfc>)
 8000d02:	881a      	ldrh	r2, [r3, #0]
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	4413      	add	r3, r2
 8000d0a:	b298      	uxth	r0, r3
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <SSD1306_Putc+0xfc>)
 8000d0e:	885a      	ldrh	r2, [r3, #2]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4413      	add	r3, r2
 8000d16:	b299      	uxth	r1, r3
 8000d18:	79bb      	ldrb	r3, [r7, #6]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	bf0c      	ite	eq
 8000d1e:	2301      	moveq	r3, #1
 8000d20:	2300      	movne	r3, #0
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	461a      	mov	r2, r3
 8000d26:	f7ff ff2f 	bl	8000b88 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d3c8      	bcc.n	8000cce <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	785b      	ldrb	r3, [r3, #1]
 8000d46:	461a      	mov	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d3ad      	bcc.n	8000caa <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <SSD1306_Putc+0xfc>)
 8000d50:	881a      	ldrh	r2, [r3, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	4413      	add	r3, r2
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <SSD1306_Putc+0xfc>)
 8000d5e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000d60:	79fb      	ldrb	r3, [r7, #7]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000594 	.word	0x20000594

08000d70 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000d7e:	e012      	b.n	8000da6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	68b9      	ldr	r1, [r7, #8]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff71 	bl	8000c70 <SSD1306_Putc>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	461a      	mov	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d002      	beq.n	8000da0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	e008      	b.n	8000db2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3301      	adds	r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d1e8      	bne.n	8000d80 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	781b      	ldrb	r3, [r3, #0]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff feca 	bl	8000b58 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000dc4:	f7ff fe9a 	bl	8000afc <SSD1306_UpdateScreen>
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <ssd1306_I2C_Init+0x24>)
 8000dd4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dd6:	e002      	b.n	8000dde <ssd1306_I2C_Init+0x12>
		p--;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f9      	bne.n	8000dd8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	0003d090 	.word	0x0003d090

08000df4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b0c7      	sub	sp, #284	; 0x11c
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000e02:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000e06:	600a      	str	r2, [r1, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e0e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000e12:	4622      	mov	r2, r4
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e1a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000e1e:	4602      	mov	r2, r0
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e2a:	460a      	mov	r2, r1
 8000e2c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000e2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000e36:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e3a:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000e48:	e015      	b.n	8000e76 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000e4a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000e4e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e52:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	441a      	add	r2, r3
 8000e5a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000e5e:	3301      	adds	r3, #1
 8000e60:	7811      	ldrb	r1, [r2, #0]
 8000e62:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e66:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000e6a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000e6c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000e70:	3301      	adds	r3, #1
 8000e72:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000e76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000e80:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000e84:	8812      	ldrh	r2, [r2, #0]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d8df      	bhi.n	8000e4a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000e8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e8e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b299      	uxth	r1, r3
 8000e96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	f107 020c 	add.w	r2, r7, #12
 8000ea8:	200a      	movs	r0, #10
 8000eaa:	9000      	str	r0, [sp, #0]
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <ssd1306_I2C_WriteMulti+0xc8>)
 8000eae:	f000 fe11 	bl	8001ad4 <HAL_I2C_Master_Transmit>
}
 8000eb2:	bf00      	nop
 8000eb4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	2000009c 	.word	0x2000009c

08000ec0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	71bb      	strb	r3, [r7, #6]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ed6:	797b      	ldrb	r3, [r7, #5]
 8000ed8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	b299      	uxth	r1, r3
 8000ede:	f107 020c 	add.w	r2, r7, #12
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <ssd1306_I2C_Write+0x38>)
 8000eea:	f000 fdf3 	bl	8001ad4 <HAL_I2C_Master_Transmit>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000009c 	.word	0x2000009c

08000efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_MspInit+0x5c>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <HAL_MspInit+0x5c>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6193      	str	r3, [r2, #24]
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_MspInit+0x5c>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_MspInit+0x5c>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_MspInit+0x5c>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f24:	61d3      	str	r3, [r2, #28]
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_MspInit+0x5c>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_MspInit+0x60>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_MspInit+0x60>)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010000 	.word	0x40010000

08000f60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a16      	ldr	r2, [pc, #88]	; (8000fd4 <HAL_I2C_MspInit+0x74>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d125      	bne.n	8000fcc <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_I2C_MspInit+0x78>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <HAL_I2C_MspInit+0x78>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_I2C_MspInit+0x78>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f98:	23c0      	movs	r3, #192	; 0xc0
 8000f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <HAL_I2C_MspInit+0x7c>)
 8000fb0:	f000 faa0 	bl	80014f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_I2C_MspInit+0x78>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_I2C_MspInit+0x78>)
 8000fba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fbe:	61d3      	str	r3, [r2, #28]
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_I2C_MspInit+0x78>)
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010c00 	.word	0x40010c00

08000fe0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_SPI_MspInit+0x88>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d12f      	bne.n	8001060 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HAL_SPI_MspInit+0x8c>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_SPI_MspInit+0x8c>)
 8001006:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <HAL_SPI_MspInit+0x8c>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_SPI_MspInit+0x8c>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a13      	ldr	r2, [pc, #76]	; (800106c <HAL_SPI_MspInit+0x8c>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_SPI_MspInit+0x8c>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001030:	2320      	movs	r3, #32
 8001032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001038:	2303      	movs	r3, #3
 800103a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4619      	mov	r1, r3
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <HAL_SPI_MspInit+0x90>)
 8001044:	f000 fa56 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4619      	mov	r1, r3
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_SPI_MspInit+0x90>)
 800105c:	f000 fa4a 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40013000 	.word	0x40013000
 800106c:	40021000 	.word	0x40021000
 8001070:	40010800 	.word	0x40010800

08001074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001084:	d10b      	bne.n	800109e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_TIM_Base_MspInit+0x34>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_TIM_Base_MspInit+0x34>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_TIM_Base_MspInit+0x34>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ca:	d117      	bne.n	80010fc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_TIM_MspPostInit+0x58>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a0c      	ldr	r2, [pc, #48]	; (8001104 <HAL_TIM_MspPostInit+0x58>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_TIM_MspPostInit+0x58>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010e4:	2302      	movs	r3, #2
 80010e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <HAL_TIM_MspPostInit+0x5c>)
 80010f8:	f000 f9fc 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000
 8001108:	40010800 	.word	0x40010800

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr

0800114e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001152:	f000 f8ab 	bl	80012ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f002 fb18 	bl	80037c0 <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20002800 	.word	0x20002800
 80011bc:	00000400 	.word	0x00000400
 80011c0:	2000059c 	.word	0x2000059c
 80011c4:	200005b8 	.word	0x200005b8

080011c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011d6:	490d      	ldr	r1, [pc, #52]	; (800120c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011ec:	4c0a      	ldr	r4, [pc, #40]	; (8001218 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011fa:	f7ff ffe5 	bl	80011c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fe:	f002 fae5 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001202:	f7ff f82b 	bl	800025c <main>
  bx lr
 8001206:	4770      	bx	lr
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001210:	08004f68 	.word	0x08004f68
  ldr r2, =_sbss
 8001214:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001218:	200005b4 	.word	0x200005b4

0800121c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC1_2_IRQHandler>
	...

08001220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_Init+0x28>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_Init+0x28>)
 800122a:	f043 0310 	orr.w	r3, r3, #16
 800122e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f92b 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001236:	200f      	movs	r0, #15
 8001238:	f000 f808 	bl	800124c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123c:	f7ff fe5e 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40022000 	.word	0x40022000

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x54>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <HAL_InitTick+0x58>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	fbb3 f3f1 	udiv	r3, r3, r1
 8001266:	fbb2 f3f3 	udiv	r3, r2, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f935 	bl	80014da <HAL_SYSTICK_Config>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e00e      	b.n	8001298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d80a      	bhi.n	8001296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f000 f90b 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800128c:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <HAL_InitTick+0x5c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	e000      	b.n	8001298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000010 	.word	0x20000010
 80012a4:	20000018 	.word	0x20000018
 80012a8:	20000014 	.word	0x20000014

080012ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_IncTick+0x1c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_IncTick+0x20>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4413      	add	r3, r2
 80012bc:	4a03      	ldr	r2, [pc, #12]	; (80012cc <HAL_IncTick+0x20>)
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	20000018 	.word	0x20000018
 80012cc:	200005a0 	.word	0x200005a0

080012d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <HAL_GetTick+0x10>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	200005a0 	.word	0x200005a0

080012e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff fff0 	bl	80012d0 <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d005      	beq.n	800130a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_Delay+0x44>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130a:	bf00      	nop
 800130c:	f7ff ffe0 	bl	80012d0 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8f7      	bhi.n	800130c <HAL_Delay+0x28>
  {
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000018 	.word	0x20000018

0800132c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
         );
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff90 	bl	8001390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff49 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff5e 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff90 	bl	80013e4 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5f 	bl	8001390 <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffb0 	bl	8001448 <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b08b      	sub	sp, #44	; 0x2c
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001506:	e161      	b.n	80017cc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001508:	2201      	movs	r2, #1
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	429a      	cmp	r2, r3
 8001522:	f040 8150 	bne.w	80017c6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a97      	ldr	r2, [pc, #604]	; (8001788 <HAL_GPIO_Init+0x294>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d05e      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001530:	4a95      	ldr	r2, [pc, #596]	; (8001788 <HAL_GPIO_Init+0x294>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d875      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 8001536:	4a95      	ldr	r2, [pc, #596]	; (800178c <HAL_GPIO_Init+0x298>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d058      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 800153c:	4a93      	ldr	r2, [pc, #588]	; (800178c <HAL_GPIO_Init+0x298>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d86f      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 8001542:	4a93      	ldr	r2, [pc, #588]	; (8001790 <HAL_GPIO_Init+0x29c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d052      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001548:	4a91      	ldr	r2, [pc, #580]	; (8001790 <HAL_GPIO_Init+0x29c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d869      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 800154e:	4a91      	ldr	r2, [pc, #580]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d04c      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001554:	4a8f      	ldr	r2, [pc, #572]	; (8001794 <HAL_GPIO_Init+0x2a0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d863      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 800155a:	4a8f      	ldr	r2, [pc, #572]	; (8001798 <HAL_GPIO_Init+0x2a4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d046      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
 8001560:	4a8d      	ldr	r2, [pc, #564]	; (8001798 <HAL_GPIO_Init+0x2a4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d85d      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 8001566:	2b12      	cmp	r3, #18
 8001568:	d82a      	bhi.n	80015c0 <HAL_GPIO_Init+0xcc>
 800156a:	2b12      	cmp	r3, #18
 800156c:	d859      	bhi.n	8001622 <HAL_GPIO_Init+0x12e>
 800156e:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <HAL_GPIO_Init+0x80>)
 8001570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001574:	080015ef 	.word	0x080015ef
 8001578:	080015c9 	.word	0x080015c9
 800157c:	080015db 	.word	0x080015db
 8001580:	0800161d 	.word	0x0800161d
 8001584:	08001623 	.word	0x08001623
 8001588:	08001623 	.word	0x08001623
 800158c:	08001623 	.word	0x08001623
 8001590:	08001623 	.word	0x08001623
 8001594:	08001623 	.word	0x08001623
 8001598:	08001623 	.word	0x08001623
 800159c:	08001623 	.word	0x08001623
 80015a0:	08001623 	.word	0x08001623
 80015a4:	08001623 	.word	0x08001623
 80015a8:	08001623 	.word	0x08001623
 80015ac:	08001623 	.word	0x08001623
 80015b0:	08001623 	.word	0x08001623
 80015b4:	08001623 	.word	0x08001623
 80015b8:	080015d1 	.word	0x080015d1
 80015bc:	080015e5 	.word	0x080015e5
 80015c0:	4a76      	ldr	r2, [pc, #472]	; (800179c <HAL_GPIO_Init+0x2a8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015c6:	e02c      	b.n	8001622 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e029      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	3304      	adds	r3, #4
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e024      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	3308      	adds	r3, #8
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e01f      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	330c      	adds	r3, #12
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e01a      	b.n	8001624 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015f6:	2304      	movs	r3, #4
 80015f8:	623b      	str	r3, [r7, #32]
          break;
 80015fa:	e013      	b.n	8001624 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d105      	bne.n	8001610 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001604:	2308      	movs	r3, #8
 8001606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69fa      	ldr	r2, [r7, #28]
 800160c:	611a      	str	r2, [r3, #16]
          break;
 800160e:	e009      	b.n	8001624 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001610:	2308      	movs	r3, #8
 8001612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	615a      	str	r2, [r3, #20]
          break;
 800161a:	e003      	b.n	8001624 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x130>
          break;
 8001622:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2bff      	cmp	r3, #255	; 0xff
 8001628:	d801      	bhi.n	800162e <HAL_GPIO_Init+0x13a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	e001      	b.n	8001632 <HAL_GPIO_Init+0x13e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3304      	adds	r3, #4
 8001632:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2bff      	cmp	r3, #255	; 0xff
 8001638:	d802      	bhi.n	8001640 <HAL_GPIO_Init+0x14c>
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0x152>
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	3b08      	subs	r3, #8
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	210f      	movs	r1, #15
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	401a      	ands	r2, r3
 8001658:	6a39      	ldr	r1, [r7, #32]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	431a      	orrs	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80a9 	beq.w	80017c6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001674:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <HAL_GPIO_Init+0x2ac>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <HAL_GPIO_Init+0x2ac>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b47      	ldr	r3, [pc, #284]	; (80017a0 <HAL_GPIO_Init+0x2ac>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800168c:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <HAL_GPIO_Init+0x2b0>)
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3302      	adds	r3, #2
 8001694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001698:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a3d      	ldr	r2, [pc, #244]	; (80017a8 <HAL_GPIO_Init+0x2b4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00d      	beq.n	80016d4 <HAL_GPIO_Init+0x1e0>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a3c      	ldr	r2, [pc, #240]	; (80017ac <HAL_GPIO_Init+0x2b8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d007      	beq.n	80016d0 <HAL_GPIO_Init+0x1dc>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <HAL_GPIO_Init+0x2bc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_GPIO_Init+0x1d8>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e004      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016cc:	2303      	movs	r3, #3
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016d4:	2300      	movs	r3, #0
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	f002 0203 	and.w	r2, r2, #3
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	4093      	lsls	r3, r2
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016e6:	492f      	ldr	r1, [pc, #188]	; (80017a4 <HAL_GPIO_Init+0x2b0>)
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001700:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	492b      	ldr	r1, [pc, #172]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	600b      	str	r3, [r1, #0]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4927      	ldr	r1, [pc, #156]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001718:	4013      	ands	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4921      	ldr	r1, [pc, #132]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	43db      	mvns	r3, r3
 800173e:	491d      	ldr	r1, [pc, #116]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001740:	4013      	ands	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	4917      	ldr	r1, [pc, #92]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	608b      	str	r3, [r1, #8]
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	43db      	mvns	r3, r3
 8001766:	4913      	ldr	r1, [pc, #76]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 8001768:	4013      	ands	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d01f      	beq.n	80017b8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	490d      	ldr	r1, [pc, #52]	; (80017b4 <HAL_GPIO_Init+0x2c0>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	60cb      	str	r3, [r1, #12]
 8001784:	e01f      	b.n	80017c6 <HAL_GPIO_Init+0x2d2>
 8001786:	bf00      	nop
 8001788:	10320000 	.word	0x10320000
 800178c:	10310000 	.word	0x10310000
 8001790:	10220000 	.word	0x10220000
 8001794:	10210000 	.word	0x10210000
 8001798:	10120000 	.word	0x10120000
 800179c:	10110000 	.word	0x10110000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	43db      	mvns	r3, r3
 80017c0:	4909      	ldr	r1, [pc, #36]	; (80017e8 <HAL_GPIO_Init+0x2f4>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	3301      	adds	r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f47f ae96 	bne.w	8001508 <HAL_GPIO_Init+0x14>
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	372c      	adds	r7, #44	; 0x2c
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e001      	b.n	800180e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	807b      	strh	r3, [r7, #2]
 8001826:	4613      	mov	r3, r2
 8001828:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800182a:	787b      	ldrb	r3, [r7, #1]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001830:	887a      	ldrh	r2, [r7, #2]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001836:	e003      	b.n	8001840 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001838:	887b      	ldrh	r3, [r7, #2]
 800183a:	041a      	lsls	r2, r3, #16
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	611a      	str	r2, [r3, #16]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
	...

0800184c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e12b      	b.n	8001ab6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff fb74 	bl	8000f60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2224      	movs	r2, #36	; 0x24
 800187c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0201 	bic.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800189e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018b0:	f001 f918 	bl	8002ae4 <HAL_RCC_GetPCLK1Freq>
 80018b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4a81      	ldr	r2, [pc, #516]	; (8001ac0 <HAL_I2C_Init+0x274>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d807      	bhi.n	80018d0 <HAL_I2C_Init+0x84>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4a80      	ldr	r2, [pc, #512]	; (8001ac4 <HAL_I2C_Init+0x278>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	bf94      	ite	ls
 80018c8:	2301      	movls	r3, #1
 80018ca:	2300      	movhi	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e006      	b.n	80018de <HAL_I2C_Init+0x92>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4a7d      	ldr	r2, [pc, #500]	; (8001ac8 <HAL_I2C_Init+0x27c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	bf94      	ite	ls
 80018d8:	2301      	movls	r3, #1
 80018da:	2300      	movhi	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0e7      	b.n	8001ab6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4a78      	ldr	r2, [pc, #480]	; (8001acc <HAL_I2C_Init+0x280>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0c9b      	lsrs	r3, r3, #18
 80018f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	430a      	orrs	r2, r1
 8001904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <HAL_I2C_Init+0x274>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d802      	bhi.n	8001920 <HAL_I2C_Init+0xd4>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	3301      	adds	r3, #1
 800191e:	e009      	b.n	8001934 <HAL_I2C_Init+0xe8>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	4a69      	ldr	r2, [pc, #420]	; (8001ad0 <HAL_I2C_Init+0x284>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	099b      	lsrs	r3, r3, #6
 8001932:	3301      	adds	r3, #1
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	430b      	orrs	r3, r1
 800193a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001946:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	495c      	ldr	r1, [pc, #368]	; (8001ac0 <HAL_I2C_Init+0x274>)
 8001950:	428b      	cmp	r3, r1
 8001952:	d819      	bhi.n	8001988 <HAL_I2C_Init+0x13c>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1e59      	subs	r1, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001962:	1c59      	adds	r1, r3, #1
 8001964:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001968:	400b      	ands	r3, r1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00a      	beq.n	8001984 <HAL_I2C_Init+0x138>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1e59      	subs	r1, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fbb1 f3f3 	udiv	r3, r1, r3
 800197c:	3301      	adds	r3, #1
 800197e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001982:	e051      	b.n	8001a28 <HAL_I2C_Init+0x1dc>
 8001984:	2304      	movs	r3, #4
 8001986:	e04f      	b.n	8001a28 <HAL_I2C_Init+0x1dc>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d111      	bne.n	80019b4 <HAL_I2C_Init+0x168>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1e58      	subs	r0, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	440b      	add	r3, r1
 800199e:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	e012      	b.n	80019da <HAL_I2C_Init+0x18e>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1e58      	subs	r0, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6859      	ldr	r1, [r3, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	0099      	lsls	r1, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Init+0x196>
 80019de:	2301      	movs	r3, #1
 80019e0:	e022      	b.n	8001a28 <HAL_I2C_Init+0x1dc>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10e      	bne.n	8001a08 <HAL_I2C_Init+0x1bc>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	1e58      	subs	r0, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6859      	ldr	r1, [r3, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	440b      	add	r3, r1
 80019f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fc:	3301      	adds	r3, #1
 80019fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a06:	e00f      	b.n	8001a28 <HAL_I2C_Init+0x1dc>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1e58      	subs	r0, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	0099      	lsls	r1, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	6809      	ldr	r1, [r1, #0]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69da      	ldr	r2, [r3, #28]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6911      	ldr	r1, [r2, #16]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68d2      	ldr	r2, [r2, #12]
 8001a62:	4311      	orrs	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	000186a0 	.word	0x000186a0
 8001ac4:	001e847f 	.word	0x001e847f
 8001ac8:	003d08ff 	.word	0x003d08ff
 8001acc:	431bde83 	.word	0x431bde83
 8001ad0:	10624dd3 	.word	0x10624dd3

08001ad4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	817b      	strh	r3, [r7, #10]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff fbf2 	bl	80012d0 <HAL_GetTick>
 8001aec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b20      	cmp	r3, #32
 8001af8:	f040 80e0 	bne.w	8001cbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2319      	movs	r3, #25
 8001b02:	2201      	movs	r2, #1
 8001b04:	4970      	ldr	r1, [pc, #448]	; (8001cc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 fa92 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b12:	2302      	movs	r3, #2
 8001b14:	e0d3      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_I2C_Master_Transmit+0x50>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e0cc      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1ea>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d007      	beq.n	8001b4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2221      	movs	r2, #33	; 0x21
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2210      	movs	r2, #16
 8001b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	893a      	ldrh	r2, [r7, #8]
 8001b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <HAL_I2C_Master_Transmit+0x1f8>)
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b8c:	8979      	ldrh	r1, [r7, #10]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	6a3a      	ldr	r2, [r7, #32]
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f9ca 	bl	8001f2c <I2C_MasterRequestWrite>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e08d      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001bb8:	e066      	b.n	8001c88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	6a39      	ldr	r1, [r7, #32]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 fb0c 	bl	80021dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00d      	beq.n	8001be6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d107      	bne.n	8001be2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e06b      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	781a      	ldrb	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d11b      	bne.n	8001c5c <HAL_I2C_Master_Transmit+0x188>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d017      	beq.n	8001c5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	781a      	ldrb	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	6a39      	ldr	r1, [r7, #32]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fafc 	bl	800225e <I2C_WaitOnBTFFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00d      	beq.n	8001c88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d107      	bne.n	8001c84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e01a      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d194      	bne.n	8001bba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e000      	b.n	8001cbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cbc:	2302      	movs	r3, #2
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	00100002 	.word	0x00100002
 8001ccc:	ffff0000 	.word	0xffff0000

08001cd0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001ce0:	f7ff faf6 	bl	80012d0 <HAL_GetTick>
 8001ce4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	f040 8111 	bne.w	8001f1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2319      	movs	r3, #25
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4988      	ldr	r1, [pc, #544]	; (8001f24 <HAL_I2C_IsDeviceReady+0x254>)
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f994 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e104      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_I2C_IsDeviceReady+0x50>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e0fd      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d007      	beq.n	8001d46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2224      	movs	r2, #36	; 0x24
 8001d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4a70      	ldr	r2, [pc, #448]	; (8001f28 <HAL_I2C_IsDeviceReady+0x258>)
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f952 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da0:	d103      	bne.n	8001daa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0b6      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dae:	897b      	ldrh	r3, [r7, #10]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fa87 	bl	80012d0 <HAL_GetTick>
 8001dc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	bf0c      	ite	eq
 8001dd2:	2301      	moveq	r3, #1
 8001dd4:	2300      	movne	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de8:	bf0c      	ite	eq
 8001dea:	2301      	moveq	r3, #1
 8001dec:	2300      	movne	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001df2:	e025      	b.n	8001e40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001df4:	f7ff fa6c 	bl	80012d0 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d302      	bcc.n	8001e0a <HAL_I2C_IsDeviceReady+0x13a>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d103      	bne.n	8001e12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	22a0      	movs	r2, #160	; 0xa0
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2ba0      	cmp	r3, #160	; 0xa0
 8001e4a:	d005      	beq.n	8001e58 <HAL_I2C_IsDeviceReady+0x188>
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d102      	bne.n	8001e58 <HAL_I2C_IsDeviceReady+0x188>
 8001e52:	7dbb      	ldrb	r3, [r7, #22]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0cd      	beq.n	8001df4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d129      	bne.n	8001ec2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2319      	movs	r3, #25
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4921      	ldr	r1, [pc, #132]	; (8001f24 <HAL_I2C_IsDeviceReady+0x254>)
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f8c6 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e036      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e02c      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2319      	movs	r3, #25
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	490f      	ldr	r1, [pc, #60]	; (8001f24 <HAL_I2C_IsDeviceReady+0x254>)
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f8a2 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e012      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	f4ff af32 	bcc.w	8001d6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f1a:	2302      	movs	r3, #2
  }
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3720      	adds	r7, #32
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	00100002 	.word	0x00100002
 8001f28:	ffff0000 	.word	0xffff0000

08001f2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d006      	beq.n	8001f56 <I2C_MasterRequestWrite+0x2a>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d003      	beq.n	8001f56 <I2C_MasterRequestWrite+0x2a>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f54:	d108      	bne.n	8001f68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e00b      	b.n	8001f80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	2b12      	cmp	r3, #18
 8001f6e:	d107      	bne.n	8001f80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f84f 	bl	8002030 <I2C_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa6:	d103      	bne.n	8001fb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e035      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fbc:	d108      	bne.n	8001fd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	e01b      	b.n	8002008 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fd0:	897b      	ldrh	r3, [r7, #10]
 8001fd2:	11db      	asrs	r3, r3, #7
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f003 0306 	and.w	r3, r3, #6
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f063 030f 	orn	r3, r3, #15
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <I2C_MasterRequestWrite+0xfc>)
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f875 	bl	80020de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e010      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ffe:	897b      	ldrh	r3, [r7, #10]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <I2C_MasterRequestWrite+0x100>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f865 	bl	80020de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	00010008 	.word	0x00010008
 800202c:	00010002 	.word	0x00010002

08002030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	4613      	mov	r3, r2
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002040:	e025      	b.n	800208e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d021      	beq.n	800208e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204a:	f7ff f941 	bl	80012d0 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d302      	bcc.n	8002060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d116      	bne.n	800208e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f043 0220 	orr.w	r2, r3, #32
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e023      	b.n	80020d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	0c1b      	lsrs	r3, r3, #16
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10d      	bne.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4013      	ands	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf0c      	ite	eq
 80020aa:	2301      	moveq	r3, #1
 80020ac:	2300      	movne	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	e00c      	b.n	80020ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4013      	ands	r3, r2
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	bf0c      	ite	eq
 80020c6:	2301      	moveq	r3, #1
 80020c8:	2300      	movne	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d0b6      	beq.n	8002042 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ec:	e051      	b.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fc:	d123      	bne.n	8002146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002116:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e046      	b.n	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d021      	beq.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214e:	f7ff f8bf 	bl	80012d0 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	d302      	bcc.n	8002164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d116      	bne.n	8002192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f043 0220 	orr.w	r2, r3, #32
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e020      	b.n	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d10c      	bne.n	80021b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4013      	ands	r3, r2
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf14      	ite	ne
 80021ae:	2301      	movne	r3, #1
 80021b0:	2300      	moveq	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	e00b      	b.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	43da      	mvns	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4013      	ands	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf14      	ite	ne
 80021c8:	2301      	movne	r3, #1
 80021ca:	2300      	moveq	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d18d      	bne.n	80020ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021e8:	e02d      	b.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f878 	bl	80022e0 <I2C_IsAcknowledgeFailed>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e02d      	b.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d021      	beq.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002202:	f7ff f865 	bl	80012d0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	429a      	cmp	r2, r3
 8002210:	d302      	bcc.n	8002218 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d116      	bne.n	8002246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f043 0220 	orr.w	r2, r3, #32
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e007      	b.n	8002256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002250:	2b80      	cmp	r3, #128	; 0x80
 8002252:	d1ca      	bne.n	80021ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800226a:	e02d      	b.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f837 	bl	80022e0 <I2C_IsAcknowledgeFailed>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e02d      	b.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d021      	beq.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002284:	f7ff f824 	bl	80012d0 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	429a      	cmp	r2, r3
 8002292:	d302      	bcc.n	800229a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f043 0220 	orr.w	r2, r3, #32
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e007      	b.n	80022d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d1ca      	bne.n	800226c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f6:	d11b      	bne.n	8002330 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002300:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e272      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8087 	beq.w	800246a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800235c:	4b92      	ldr	r3, [pc, #584]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b04      	cmp	r3, #4
 8002366:	d00c      	beq.n	8002382 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002368:	4b8f      	ldr	r3, [pc, #572]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d112      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
 8002374:	4b8c      	ldr	r3, [pc, #560]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002380:	d10b      	bne.n	800239a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002382:	4b89      	ldr	r3, [pc, #548]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d06c      	beq.n	8002468 <HAL_RCC_OscConfig+0x12c>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d168      	bne.n	8002468 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e24c      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x76>
 80023a4:	4b80      	ldr	r3, [pc, #512]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a7f      	ldr	r2, [pc, #508]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e02e      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x98>
 80023ba:	4b7b      	ldr	r3, [pc, #492]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7a      	ldr	r2, [pc, #488]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b78      	ldr	r3, [pc, #480]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a77      	ldr	r2, [pc, #476]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e01d      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0xbc>
 80023de:	4b72      	ldr	r3, [pc, #456]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a71      	ldr	r2, [pc, #452]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6e      	ldr	r2, [pc, #440]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e00b      	b.n	8002410 <HAL_RCC_OscConfig+0xd4>
 80023f8:	4b6b      	ldr	r3, [pc, #428]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6a      	ldr	r2, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b68      	ldr	r3, [pc, #416]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a67      	ldr	r2, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800240a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe ff5a 	bl	80012d0 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002420:	f7fe ff56 	bl	80012d0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e200      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	4b5d      	ldr	r3, [pc, #372]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0xe4>
 800243e:	e014      	b.n	800246a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe ff46 	bl	80012d0 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002448:	f7fe ff42 	bl	80012d0 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1ec      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x10c>
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d063      	beq.n	800253e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002476:	4b4c      	ldr	r3, [pc, #304]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002482:	4b49      	ldr	r3, [pc, #292]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b08      	cmp	r3, #8
 800248c:	d11c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x18c>
 800248e:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d116      	bne.n	80024c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x176>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e1c0      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4939      	ldr	r1, [pc, #228]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	e03a      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d020      	beq.n	8002512 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d0:	4b36      	ldr	r3, [pc, #216]	; (80025ac <HAL_RCC_OscConfig+0x270>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fefb 	bl	80012d0 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024de:	f7fe fef7 	bl	80012d0 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1a1      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4927      	ldr	r1, [pc, #156]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]
 8002510:	e015      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_RCC_OscConfig+0x270>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe feda 	bl	80012d0 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002520:	f7fe fed6 	bl	80012d0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e180      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d03a      	beq.n	80025c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d019      	beq.n	8002586 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7fe feba 	bl	80012d0 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe feb6 	bl	80012d0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e160      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_RCC_OscConfig+0x26c>)
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800257e:	2001      	movs	r0, #1
 8002580:	f000 fac4 	bl	8002b0c <RCC_Delay>
 8002584:	e01c      	b.n	80025c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258c:	f7fe fea0 	bl	80012d0 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002592:	e00f      	b.n	80025b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002594:	f7fe fe9c 	bl	80012d0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d908      	bls.n	80025b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e146      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	42420000 	.word	0x42420000
 80025b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	4b92      	ldr	r3, [pc, #584]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e9      	bne.n	8002594 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a6 	beq.w	800271a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b8b      	ldr	r3, [pc, #556]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10d      	bne.n	80025fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b88      	ldr	r3, [pc, #544]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4a87      	ldr	r2, [pc, #540]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	61d3      	str	r3, [r2, #28]
 80025ea:	4b85      	ldr	r3, [pc, #532]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_RCC_OscConfig+0x4c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002606:	4b7f      	ldr	r3, [pc, #508]	; (8002804 <HAL_RCC_OscConfig+0x4c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a7e      	ldr	r2, [pc, #504]	; (8002804 <HAL_RCC_OscConfig+0x4c8>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7fe fe5d 	bl	80012d0 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7fe fe59 	bl	80012d0 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b64      	cmp	r3, #100	; 0x64
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e103      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	4b75      	ldr	r3, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x4c8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x312>
 8002640:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	e02d      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x334>
 8002656:	4b6a      	ldr	r3, [pc, #424]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a69      	ldr	r2, [pc, #420]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	4b67      	ldr	r3, [pc, #412]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4a66      	ldr	r2, [pc, #408]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	6213      	str	r3, [r2, #32]
 800266e:	e01c      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x356>
 8002678:	4b61      	ldr	r3, [pc, #388]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a60      	ldr	r2, [pc, #384]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6213      	str	r3, [r2, #32]
 8002684:	4b5e      	ldr	r3, [pc, #376]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a5d      	ldr	r2, [pc, #372]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6213      	str	r3, [r2, #32]
 8002690:	e00b      	b.n	80026aa <HAL_RCC_OscConfig+0x36e>
 8002692:	4b5b      	ldr	r3, [pc, #364]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a5a      	ldr	r2, [pc, #360]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6213      	str	r3, [r2, #32]
 800269e:	4b58      	ldr	r3, [pc, #352]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4a57      	ldr	r2, [pc, #348]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d015      	beq.n	80026de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fe0d 	bl	80012d0 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe fe09 	bl	80012d0 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0b1      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d0:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ee      	beq.n	80026ba <HAL_RCC_OscConfig+0x37e>
 80026dc:	e014      	b.n	8002708 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026de:	f7fe fdf7 	bl	80012d0 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7fe fdf3 	bl	80012d0 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e09b      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fc:	4b40      	ldr	r3, [pc, #256]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ee      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002708:	7dfb      	ldrb	r3, [r7, #23]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d105      	bne.n	800271a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b3c      	ldr	r3, [pc, #240]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a3b      	ldr	r2, [pc, #236]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002718:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8087 	beq.w	8002832 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002724:	4b36      	ldr	r3, [pc, #216]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d061      	beq.n	80027f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d146      	bne.n	80027c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002738:	4b33      	ldr	r3, [pc, #204]	; (8002808 <HAL_RCC_OscConfig+0x4cc>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe fdc7 	bl	80012d0 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002746:	f7fe fdc3 	bl	80012d0 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e06d      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002758:	4b29      	ldr	r3, [pc, #164]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1f0      	bne.n	8002746 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276c:	d108      	bne.n	8002780 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	4921      	ldr	r1, [pc, #132]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002780:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a19      	ldr	r1, [r3, #32]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	430b      	orrs	r3, r1
 8002792:	491b      	ldr	r1, [pc, #108]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_RCC_OscConfig+0x4cc>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe fd97 	bl	80012d0 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a6:	f7fe fd93 	bl	80012d0 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e03d      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x46a>
 80027c4:	e035      	b.n	8002832 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_RCC_OscConfig+0x4cc>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fd80 	bl	80012d0 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7fe fd7c 	bl	80012d0 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e026      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x498>
 80027f2:	e01e      	b.n	8002832 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d107      	bne.n	800280c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e019      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
 8002800:	40021000 	.word	0x40021000
 8002804:	40007000 	.word	0x40007000
 8002808:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_OscConfig+0x500>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	429a      	cmp	r2, r3
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0d0      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002854:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d910      	bls.n	8002884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b67      	ldr	r3, [pc, #412]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 0207 	bic.w	r2, r3, #7
 800286a:	4965      	ldr	r1, [pc, #404]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0b8      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800289c:	4b59      	ldr	r3, [pc, #356]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b4:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a52      	ldr	r2, [pc, #328]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	494d      	ldr	r1, [pc, #308]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d040      	beq.n	8002960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d115      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e07f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e073      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06b      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291e:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f023 0203 	bic.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4936      	ldr	r1, [pc, #216]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002930:	f7fe fcce 	bl	80012d0 <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	e00a      	b.n	800294e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002938:	f7fe fcca 	bl	80012d0 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	; 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e053      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 020c 	and.w	r2, r3, #12
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	429a      	cmp	r2, r3
 800295e:	d1eb      	bne.n	8002938 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002960:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d210      	bcs.n	8002990 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 0207 	bic.w	r2, r3, #7
 8002976:	4922      	ldr	r1, [pc, #136]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e032      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4916      	ldr	r1, [pc, #88]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	490e      	ldr	r1, [pc, #56]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ce:	f000 f821 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	490a      	ldr	r1, [pc, #40]	; (8002a08 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	5ccb      	ldrb	r3, [r1, r3]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <HAL_RCC_ClockConfig+0x1cc>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_ClockConfig+0x1d0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe fc2c 	bl	800124c <HAL_InitTick>

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08004f14 	.word	0x08004f14
 8002a0c:	20000010 	.word	0x20000010
 8002a10:	20000014 	.word	0x20000014

08002a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	b490      	push	{r4, r7}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a1a:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xac>)
 8002a1c:	1d3c      	adds	r4, r7, #4
 8002a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a24:	f240 2301 	movw	r3, #513	; 0x201
 8002a28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a3e:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x40>
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x46>
 8002a52:	e02b      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a54:	4b1c      	ldr	r3, [pc, #112]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a56:	623b      	str	r3, [r7, #32]
      break;
 8002a58:	e02b      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	0c9b      	lsrs	r3, r3, #18
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3328      	adds	r3, #40	; 0x28
 8002a64:	443b      	add	r3, r7
 8002a66:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a6a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d012      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	0c5b      	lsrs	r3, r3, #17
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	3328      	adds	r3, #40	; 0x28
 8002a82:	443b      	add	r3, r7
 8002a84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a8e:	fb03 f202 	mul.w	r2, r3, r2
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9a:	e004      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4a0b      	ldr	r2, [pc, #44]	; (8002acc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	623b      	str	r3, [r7, #32]
      break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aae:	623b      	str	r3, [r7, #32]
      break;
 8002ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3728      	adds	r7, #40	; 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc90      	pop	{r4, r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	080041a8 	.word	0x080041a8
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	007a1200 	.word	0x007a1200
 8002acc:	003d0900 	.word	0x003d0900

08002ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad4:	4b02      	ldr	r3, [pc, #8]	; (8002ae0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	20000010 	.word	0x20000010

08002ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ae8:	f7ff fff2 	bl	8002ad0 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4903      	ldr	r1, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	08004f24 	.word	0x08004f24

08002b0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <RCC_Delay+0x34>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <RCC_Delay+0x38>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	0a5b      	lsrs	r3, r3, #9
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b28:	bf00      	nop
  }
  while (Delay --);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1e5a      	subs	r2, r3, #1
 8002b2e:	60fa      	str	r2, [r7, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f9      	bne.n	8002b28 <RCC_Delay+0x1c>
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	20000010 	.word	0x20000010
 8002b44:	10624dd3 	.word	0x10624dd3

08002b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e076      	b.n	8002c48 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d108      	bne.n	8002b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b6a:	d009      	beq.n	8002b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	61da      	str	r2, [r3, #28]
 8002b72:	e005      	b.n	8002b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d106      	bne.n	8002ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7fe fa20 	bl	8000fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c04:	ea42 0103 	orr.w	r1, r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	0c1a      	lsrs	r2, r3, #16
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f002 0204 	and.w	r2, r2, #4
 8002c26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e041      	b.n	8002ce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe f9fc 	bl	8001074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4610      	mov	r0, r2
 8002c90:	f000 faa4 	bl	80031dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e041      	b.n	8002d84 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d106      	bne.n	8002d1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f839 	bl	8002d8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	f000 fa55 	bl	80031dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
	...

08002da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_TIM_PWM_Start+0x24>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e022      	b.n	8002e0a <HAL_TIM_PWM_Start+0x6a>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d109      	bne.n	8002dde <HAL_TIM_PWM_Start+0x3e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	e015      	b.n	8002e0a <HAL_TIM_PWM_Start+0x6a>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d109      	bne.n	8002df8 <HAL_TIM_PWM_Start+0x58>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e008      	b.n	8002e0a <HAL_TIM_PWM_Start+0x6a>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e059      	b.n	8002ec6 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <HAL_TIM_PWM_Start+0x82>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e20:	e013      	b.n	8002e4a <HAL_TIM_PWM_Start+0xaa>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_PWM_Start+0x92>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e30:	e00b      	b.n	8002e4a <HAL_TIM_PWM_Start+0xaa>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_PWM_Start+0xa2>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	e003      	b.n	8002e4a <HAL_TIM_PWM_Start+0xaa>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	6839      	ldr	r1, [r7, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fc38 	bl	80036c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <HAL_TIM_PWM_Start+0x130>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d107      	bne.n	8002e72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a16      	ldr	r2, [pc, #88]	; (8002ed0 <HAL_TIM_PWM_Start+0x130>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d009      	beq.n	8002e90 <HAL_TIM_PWM_Start+0xf0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e84:	d004      	beq.n	8002e90 <HAL_TIM_PWM_Start+0xf0>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <HAL_TIM_PWM_Start+0x134>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d111      	bne.n	8002eb4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d010      	beq.n	8002ec4 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0201 	orr.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb2:	e007      	b.n	8002ec4 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	40000400 	.word	0x40000400

08002ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e0ac      	b.n	800304c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	f200 809f 	bhi.w	8003040 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f02:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f08:	08002f3d 	.word	0x08002f3d
 8002f0c:	08003041 	.word	0x08003041
 8002f10:	08003041 	.word	0x08003041
 8002f14:	08003041 	.word	0x08003041
 8002f18:	08002f7d 	.word	0x08002f7d
 8002f1c:	08003041 	.word	0x08003041
 8002f20:	08003041 	.word	0x08003041
 8002f24:	08003041 	.word	0x08003041
 8002f28:	08002fbf 	.word	0x08002fbf
 8002f2c:	08003041 	.word	0x08003041
 8002f30:	08003041 	.word	0x08003041
 8002f34:	08003041 	.word	0x08003041
 8002f38:	08002fff 	.word	0x08002fff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f9a2 	bl	800328c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0208 	orr.w	r2, r2, #8
 8002f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0204 	bic.w	r2, r2, #4
 8002f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6999      	ldr	r1, [r3, #24]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	619a      	str	r2, [r3, #24]
      break;
 8002f7a:	e062      	b.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f9e8 	bl	8003358 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6999      	ldr	r1, [r3, #24]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	021a      	lsls	r2, r3, #8
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	619a      	str	r2, [r3, #24]
      break;
 8002fbc:	e041      	b.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fa31 	bl	800342c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0208 	orr.w	r2, r2, #8
 8002fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69da      	ldr	r2, [r3, #28]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0204 	bic.w	r2, r2, #4
 8002fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69d9      	ldr	r1, [r3, #28]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	61da      	str	r2, [r3, #28]
      break;
 8002ffc:	e021      	b.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fa7b 	bl	8003500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69d9      	ldr	r1, [r3, #28]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	021a      	lsls	r2, r3, #8
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	61da      	str	r2, [r3, #28]
      break;
 800303e:	e000      	b.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003040:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_TIM_ConfigClockSource+0x18>
 8003068:	2302      	movs	r3, #2
 800306a:	e0b3      	b.n	80031d4 <HAL_TIM_ConfigClockSource+0x180>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800308a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003092:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a4:	d03e      	beq.n	8003124 <HAL_TIM_ConfigClockSource+0xd0>
 80030a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030aa:	f200 8087 	bhi.w	80031bc <HAL_TIM_ConfigClockSource+0x168>
 80030ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b2:	f000 8085 	beq.w	80031c0 <HAL_TIM_ConfigClockSource+0x16c>
 80030b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ba:	d87f      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x168>
 80030bc:	2b70      	cmp	r3, #112	; 0x70
 80030be:	d01a      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0xa2>
 80030c0:	2b70      	cmp	r3, #112	; 0x70
 80030c2:	d87b      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x168>
 80030c4:	2b60      	cmp	r3, #96	; 0x60
 80030c6:	d050      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x116>
 80030c8:	2b60      	cmp	r3, #96	; 0x60
 80030ca:	d877      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x168>
 80030cc:	2b50      	cmp	r3, #80	; 0x50
 80030ce:	d03c      	beq.n	800314a <HAL_TIM_ConfigClockSource+0xf6>
 80030d0:	2b50      	cmp	r3, #80	; 0x50
 80030d2:	d873      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x168>
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d058      	beq.n	800318a <HAL_TIM_ConfigClockSource+0x136>
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d86f      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x168>
 80030dc:	2b30      	cmp	r3, #48	; 0x30
 80030de:	d064      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x156>
 80030e0:	2b30      	cmp	r3, #48	; 0x30
 80030e2:	d86b      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x168>
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d060      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x156>
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d867      	bhi.n	80031bc <HAL_TIM_ConfigClockSource+0x168>
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d05c      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x156>
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d05a      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030f4:	e062      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6899      	ldr	r1, [r3, #8]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f000 fac0 	bl	800368a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003118:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	609a      	str	r2, [r3, #8]
      break;
 8003122:	e04e      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6818      	ldr	r0, [r3, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	6899      	ldr	r1, [r3, #8]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f000 faa9 	bl	800368a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003146:	609a      	str	r2, [r3, #8]
      break;
 8003148:	e03b      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	461a      	mov	r2, r3
 8003158:	f000 fa20 	bl	800359c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2150      	movs	r1, #80	; 0x50
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fa77 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 8003168:	e02b      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	461a      	mov	r2, r3
 8003178:	f000 fa3e 	bl	80035f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2160      	movs	r1, #96	; 0x60
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fa67 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 8003188:	e01b      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	461a      	mov	r2, r3
 8003198:	f000 fa00 	bl	800359c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2140      	movs	r1, #64	; 0x40
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fa57 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 80031a8:	e00b      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4619      	mov	r1, r3
 80031b4:	4610      	mov	r0, r2
 80031b6:	f000 fa4e 	bl	8003656 <TIM_ITRx_SetConfig>
        break;
 80031ba:	e002      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031bc:	bf00      	nop
 80031be:	e000      	b.n	80031c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a25      	ldr	r2, [pc, #148]	; (8003284 <TIM_Base_SetConfig+0xa8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d007      	beq.n	8003204 <TIM_Base_SetConfig+0x28>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fa:	d003      	beq.n	8003204 <TIM_Base_SetConfig+0x28>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a22      	ldr	r2, [pc, #136]	; (8003288 <TIM_Base_SetConfig+0xac>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d108      	bne.n	8003216 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1a      	ldr	r2, [pc, #104]	; (8003284 <TIM_Base_SetConfig+0xa8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <TIM_Base_SetConfig+0x52>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003224:	d003      	beq.n	800322e <TIM_Base_SetConfig+0x52>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a17      	ldr	r2, [pc, #92]	; (8003288 <TIM_Base_SetConfig+0xac>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d108      	bne.n	8003240 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a07      	ldr	r2, [pc, #28]	; (8003284 <TIM_Base_SetConfig+0xa8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d103      	bne.n	8003274 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	615a      	str	r2, [r3, #20]
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400

0800328c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	f023 0201 	bic.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 0302 	bic.w	r3, r3, #2
 80032d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a1c      	ldr	r2, [pc, #112]	; (8003354 <TIM_OC1_SetConfig+0xc8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10c      	bne.n	8003302 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0308 	bic.w	r3, r3, #8
 80032ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f023 0304 	bic.w	r3, r3, #4
 8003300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a13      	ldr	r2, [pc, #76]	; (8003354 <TIM_OC1_SetConfig+0xc8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d111      	bne.n	800332e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40012c00 	.word	0x40012c00

08003358 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0210 	bic.w	r2, r3, #16
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0320 	bic.w	r3, r3, #32
 80033a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a1d      	ldr	r2, [pc, #116]	; (8003428 <TIM_OC2_SetConfig+0xd0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d10d      	bne.n	80033d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a14      	ldr	r2, [pc, #80]	; (8003428 <TIM_OC2_SetConfig+0xd0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d113      	bne.n	8003404 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	621a      	str	r2, [r3, #32]
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	40012c00 	.word	0x40012c00

0800342c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1d      	ldr	r2, [pc, #116]	; (80034fc <TIM_OC3_SetConfig+0xd0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10d      	bne.n	80034a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003490:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a14      	ldr	r2, [pc, #80]	; (80034fc <TIM_OC3_SetConfig+0xd0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d113      	bne.n	80034d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	621a      	str	r2, [r3, #32]
}
 80034f0:	bf00      	nop
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40012c00 	.word	0x40012c00

08003500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	021b      	lsls	r3, r3, #8
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800354a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	031b      	lsls	r3, r3, #12
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a0f      	ldr	r2, [pc, #60]	; (8003598 <TIM_OC4_SetConfig+0x98>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d109      	bne.n	8003574 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003566:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	019b      	lsls	r3, r3, #6
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr
 8003598:	40012c00 	.word	0x40012c00

0800359c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f023 0201 	bic.w	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f023 030a 	bic.w	r3, r3, #10
 80035d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	621a      	str	r2, [r3, #32]
}
 80035ee:	bf00      	nop
 80035f0:	371c      	adds	r7, #28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f023 0210 	bic.w	r2, r3, #16
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003622:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	031b      	lsls	r3, r3, #12
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003634:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	621a      	str	r2, [r3, #32]
}
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	f043 0307 	orr.w	r3, r3, #7
 8003678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr

0800368a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800368a:	b480      	push	{r7}
 800368c:	b087      	sub	sp, #28
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	021a      	lsls	r2, r3, #8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	609a      	str	r2, [r3, #8]
}
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	2201      	movs	r2, #1
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a1a      	ldr	r2, [r3, #32]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	401a      	ands	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a1a      	ldr	r2, [r3, #32]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	431a      	orrs	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	621a      	str	r2, [r3, #32]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003724:	2302      	movs	r3, #2
 8003726:	e041      	b.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d009      	beq.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003774:	d004      	beq.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a10      	ldr	r2, [pc, #64]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d10c      	bne.n	800379a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003786:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	4313      	orrs	r3, r2
 8003790:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40000400 	.word	0x40000400

080037c0 <__errno>:
 80037c0:	4b01      	ldr	r3, [pc, #4]	; (80037c8 <__errno+0x8>)
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	2000001c 	.word	0x2000001c

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	2600      	movs	r6, #0
 80037d0:	4d0c      	ldr	r5, [pc, #48]	; (8003804 <__libc_init_array+0x38>)
 80037d2:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <__libc_init_array+0x3c>)
 80037d4:	1b64      	subs	r4, r4, r5
 80037d6:	10a4      	asrs	r4, r4, #2
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	f000 fc9c 	bl	8004118 <_init>
 80037e0:	2600      	movs	r6, #0
 80037e2:	4d0a      	ldr	r5, [pc, #40]	; (800380c <__libc_init_array+0x40>)
 80037e4:	4c0a      	ldr	r4, [pc, #40]	; (8003810 <__libc_init_array+0x44>)
 80037e6:	1b64      	subs	r4, r4, r5
 80037e8:	10a4      	asrs	r4, r4, #2
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	08004f60 	.word	0x08004f60
 8003808:	08004f60 	.word	0x08004f60
 800380c:	08004f60 	.word	0x08004f60
 8003810:	08004f64 	.word	0x08004f64

08003814 <memset>:
 8003814:	4603      	mov	r3, r0
 8003816:	4402      	add	r2, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <siprintf>:
 8003824:	b40e      	push	{r1, r2, r3}
 8003826:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800382a:	b500      	push	{lr}
 800382c:	b09c      	sub	sp, #112	; 0x70
 800382e:	ab1d      	add	r3, sp, #116	; 0x74
 8003830:	9002      	str	r0, [sp, #8]
 8003832:	9006      	str	r0, [sp, #24]
 8003834:	9107      	str	r1, [sp, #28]
 8003836:	9104      	str	r1, [sp, #16]
 8003838:	4808      	ldr	r0, [pc, #32]	; (800385c <siprintf+0x38>)
 800383a:	4909      	ldr	r1, [pc, #36]	; (8003860 <siprintf+0x3c>)
 800383c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003840:	9105      	str	r1, [sp, #20]
 8003842:	6800      	ldr	r0, [r0, #0]
 8003844:	a902      	add	r1, sp, #8
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	f000 f868 	bl	800391c <_svfiprintf_r>
 800384c:	2200      	movs	r2, #0
 800384e:	9b02      	ldr	r3, [sp, #8]
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	b01c      	add	sp, #112	; 0x70
 8003854:	f85d eb04 	ldr.w	lr, [sp], #4
 8003858:	b003      	add	sp, #12
 800385a:	4770      	bx	lr
 800385c:	2000001c 	.word	0x2000001c
 8003860:	ffff0208 	.word	0xffff0208

08003864 <__ssputs_r>:
 8003864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003868:	688e      	ldr	r6, [r1, #8]
 800386a:	4682      	mov	sl, r0
 800386c:	429e      	cmp	r6, r3
 800386e:	460c      	mov	r4, r1
 8003870:	4690      	mov	r8, r2
 8003872:	461f      	mov	r7, r3
 8003874:	d838      	bhi.n	80038e8 <__ssputs_r+0x84>
 8003876:	898a      	ldrh	r2, [r1, #12]
 8003878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800387c:	d032      	beq.n	80038e4 <__ssputs_r+0x80>
 800387e:	6825      	ldr	r5, [r4, #0]
 8003880:	6909      	ldr	r1, [r1, #16]
 8003882:	3301      	adds	r3, #1
 8003884:	eba5 0901 	sub.w	r9, r5, r1
 8003888:	6965      	ldr	r5, [r4, #20]
 800388a:	444b      	add	r3, r9
 800388c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003894:	106d      	asrs	r5, r5, #1
 8003896:	429d      	cmp	r5, r3
 8003898:	bf38      	it	cc
 800389a:	461d      	movcc	r5, r3
 800389c:	0553      	lsls	r3, r2, #21
 800389e:	d531      	bpl.n	8003904 <__ssputs_r+0xa0>
 80038a0:	4629      	mov	r1, r5
 80038a2:	f000 fb6f 	bl	8003f84 <_malloc_r>
 80038a6:	4606      	mov	r6, r0
 80038a8:	b950      	cbnz	r0, 80038c0 <__ssputs_r+0x5c>
 80038aa:	230c      	movs	r3, #12
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	f8ca 3000 	str.w	r3, [sl]
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ba:	81a3      	strh	r3, [r4, #12]
 80038bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c0:	464a      	mov	r2, r9
 80038c2:	6921      	ldr	r1, [r4, #16]
 80038c4:	f000 face 	bl	8003e64 <memcpy>
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d2:	81a3      	strh	r3, [r4, #12]
 80038d4:	6126      	str	r6, [r4, #16]
 80038d6:	444e      	add	r6, r9
 80038d8:	6026      	str	r6, [r4, #0]
 80038da:	463e      	mov	r6, r7
 80038dc:	6165      	str	r5, [r4, #20]
 80038de:	eba5 0509 	sub.w	r5, r5, r9
 80038e2:	60a5      	str	r5, [r4, #8]
 80038e4:	42be      	cmp	r6, r7
 80038e6:	d900      	bls.n	80038ea <__ssputs_r+0x86>
 80038e8:	463e      	mov	r6, r7
 80038ea:	4632      	mov	r2, r6
 80038ec:	4641      	mov	r1, r8
 80038ee:	6820      	ldr	r0, [r4, #0]
 80038f0:	f000 fac6 	bl	8003e80 <memmove>
 80038f4:	68a3      	ldr	r3, [r4, #8]
 80038f6:	2000      	movs	r0, #0
 80038f8:	1b9b      	subs	r3, r3, r6
 80038fa:	60a3      	str	r3, [r4, #8]
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	4433      	add	r3, r6
 8003900:	6023      	str	r3, [r4, #0]
 8003902:	e7db      	b.n	80038bc <__ssputs_r+0x58>
 8003904:	462a      	mov	r2, r5
 8003906:	f000 fbb1 	bl	800406c <_realloc_r>
 800390a:	4606      	mov	r6, r0
 800390c:	2800      	cmp	r0, #0
 800390e:	d1e1      	bne.n	80038d4 <__ssputs_r+0x70>
 8003910:	4650      	mov	r0, sl
 8003912:	6921      	ldr	r1, [r4, #16]
 8003914:	f000 face 	bl	8003eb4 <_free_r>
 8003918:	e7c7      	b.n	80038aa <__ssputs_r+0x46>
	...

0800391c <_svfiprintf_r>:
 800391c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003920:	4698      	mov	r8, r3
 8003922:	898b      	ldrh	r3, [r1, #12]
 8003924:	4607      	mov	r7, r0
 8003926:	061b      	lsls	r3, r3, #24
 8003928:	460d      	mov	r5, r1
 800392a:	4614      	mov	r4, r2
 800392c:	b09d      	sub	sp, #116	; 0x74
 800392e:	d50e      	bpl.n	800394e <_svfiprintf_r+0x32>
 8003930:	690b      	ldr	r3, [r1, #16]
 8003932:	b963      	cbnz	r3, 800394e <_svfiprintf_r+0x32>
 8003934:	2140      	movs	r1, #64	; 0x40
 8003936:	f000 fb25 	bl	8003f84 <_malloc_r>
 800393a:	6028      	str	r0, [r5, #0]
 800393c:	6128      	str	r0, [r5, #16]
 800393e:	b920      	cbnz	r0, 800394a <_svfiprintf_r+0x2e>
 8003940:	230c      	movs	r3, #12
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	f04f 30ff 	mov.w	r0, #4294967295
 8003948:	e0d1      	b.n	8003aee <_svfiprintf_r+0x1d2>
 800394a:	2340      	movs	r3, #64	; 0x40
 800394c:	616b      	str	r3, [r5, #20]
 800394e:	2300      	movs	r3, #0
 8003950:	9309      	str	r3, [sp, #36]	; 0x24
 8003952:	2320      	movs	r3, #32
 8003954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003958:	2330      	movs	r3, #48	; 0x30
 800395a:	f04f 0901 	mov.w	r9, #1
 800395e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003962:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b08 <_svfiprintf_r+0x1ec>
 8003966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800396a:	4623      	mov	r3, r4
 800396c:	469a      	mov	sl, r3
 800396e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003972:	b10a      	cbz	r2, 8003978 <_svfiprintf_r+0x5c>
 8003974:	2a25      	cmp	r2, #37	; 0x25
 8003976:	d1f9      	bne.n	800396c <_svfiprintf_r+0x50>
 8003978:	ebba 0b04 	subs.w	fp, sl, r4
 800397c:	d00b      	beq.n	8003996 <_svfiprintf_r+0x7a>
 800397e:	465b      	mov	r3, fp
 8003980:	4622      	mov	r2, r4
 8003982:	4629      	mov	r1, r5
 8003984:	4638      	mov	r0, r7
 8003986:	f7ff ff6d 	bl	8003864 <__ssputs_r>
 800398a:	3001      	adds	r0, #1
 800398c:	f000 80aa 	beq.w	8003ae4 <_svfiprintf_r+0x1c8>
 8003990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003992:	445a      	add	r2, fp
 8003994:	9209      	str	r2, [sp, #36]	; 0x24
 8003996:	f89a 3000 	ldrb.w	r3, [sl]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80a2 	beq.w	8003ae4 <_svfiprintf_r+0x1c8>
 80039a0:	2300      	movs	r3, #0
 80039a2:	f04f 32ff 	mov.w	r2, #4294967295
 80039a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039aa:	f10a 0a01 	add.w	sl, sl, #1
 80039ae:	9304      	str	r3, [sp, #16]
 80039b0:	9307      	str	r3, [sp, #28]
 80039b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039b6:	931a      	str	r3, [sp, #104]	; 0x68
 80039b8:	4654      	mov	r4, sl
 80039ba:	2205      	movs	r2, #5
 80039bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039c0:	4851      	ldr	r0, [pc, #324]	; (8003b08 <_svfiprintf_r+0x1ec>)
 80039c2:	f000 fa41 	bl	8003e48 <memchr>
 80039c6:	9a04      	ldr	r2, [sp, #16]
 80039c8:	b9d8      	cbnz	r0, 8003a02 <_svfiprintf_r+0xe6>
 80039ca:	06d0      	lsls	r0, r2, #27
 80039cc:	bf44      	itt	mi
 80039ce:	2320      	movmi	r3, #32
 80039d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039d4:	0711      	lsls	r1, r2, #28
 80039d6:	bf44      	itt	mi
 80039d8:	232b      	movmi	r3, #43	; 0x2b
 80039da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039de:	f89a 3000 	ldrb.w	r3, [sl]
 80039e2:	2b2a      	cmp	r3, #42	; 0x2a
 80039e4:	d015      	beq.n	8003a12 <_svfiprintf_r+0xf6>
 80039e6:	4654      	mov	r4, sl
 80039e8:	2000      	movs	r0, #0
 80039ea:	f04f 0c0a 	mov.w	ip, #10
 80039ee:	9a07      	ldr	r2, [sp, #28]
 80039f0:	4621      	mov	r1, r4
 80039f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039f6:	3b30      	subs	r3, #48	; 0x30
 80039f8:	2b09      	cmp	r3, #9
 80039fa:	d94e      	bls.n	8003a9a <_svfiprintf_r+0x17e>
 80039fc:	b1b0      	cbz	r0, 8003a2c <_svfiprintf_r+0x110>
 80039fe:	9207      	str	r2, [sp, #28]
 8003a00:	e014      	b.n	8003a2c <_svfiprintf_r+0x110>
 8003a02:	eba0 0308 	sub.w	r3, r0, r8
 8003a06:	fa09 f303 	lsl.w	r3, r9, r3
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	46a2      	mov	sl, r4
 8003a0e:	9304      	str	r3, [sp, #16]
 8003a10:	e7d2      	b.n	80039b8 <_svfiprintf_r+0x9c>
 8003a12:	9b03      	ldr	r3, [sp, #12]
 8003a14:	1d19      	adds	r1, r3, #4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	9103      	str	r1, [sp, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bfbb      	ittet	lt
 8003a1e:	425b      	neglt	r3, r3
 8003a20:	f042 0202 	orrlt.w	r2, r2, #2
 8003a24:	9307      	strge	r3, [sp, #28]
 8003a26:	9307      	strlt	r3, [sp, #28]
 8003a28:	bfb8      	it	lt
 8003a2a:	9204      	strlt	r2, [sp, #16]
 8003a2c:	7823      	ldrb	r3, [r4, #0]
 8003a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a30:	d10c      	bne.n	8003a4c <_svfiprintf_r+0x130>
 8003a32:	7863      	ldrb	r3, [r4, #1]
 8003a34:	2b2a      	cmp	r3, #42	; 0x2a
 8003a36:	d135      	bne.n	8003aa4 <_svfiprintf_r+0x188>
 8003a38:	9b03      	ldr	r3, [sp, #12]
 8003a3a:	3402      	adds	r4, #2
 8003a3c:	1d1a      	adds	r2, r3, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	9203      	str	r2, [sp, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bfb8      	it	lt
 8003a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a4a:	9305      	str	r3, [sp, #20]
 8003a4c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003b0c <_svfiprintf_r+0x1f0>
 8003a50:	2203      	movs	r2, #3
 8003a52:	4650      	mov	r0, sl
 8003a54:	7821      	ldrb	r1, [r4, #0]
 8003a56:	f000 f9f7 	bl	8003e48 <memchr>
 8003a5a:	b140      	cbz	r0, 8003a6e <_svfiprintf_r+0x152>
 8003a5c:	2340      	movs	r3, #64	; 0x40
 8003a5e:	eba0 000a 	sub.w	r0, r0, sl
 8003a62:	fa03 f000 	lsl.w	r0, r3, r0
 8003a66:	9b04      	ldr	r3, [sp, #16]
 8003a68:	3401      	adds	r4, #1
 8003a6a:	4303      	orrs	r3, r0
 8003a6c:	9304      	str	r3, [sp, #16]
 8003a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a72:	2206      	movs	r2, #6
 8003a74:	4826      	ldr	r0, [pc, #152]	; (8003b10 <_svfiprintf_r+0x1f4>)
 8003a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a7a:	f000 f9e5 	bl	8003e48 <memchr>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d038      	beq.n	8003af4 <_svfiprintf_r+0x1d8>
 8003a82:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <_svfiprintf_r+0x1f8>)
 8003a84:	bb1b      	cbnz	r3, 8003ace <_svfiprintf_r+0x1b2>
 8003a86:	9b03      	ldr	r3, [sp, #12]
 8003a88:	3307      	adds	r3, #7
 8003a8a:	f023 0307 	bic.w	r3, r3, #7
 8003a8e:	3308      	adds	r3, #8
 8003a90:	9303      	str	r3, [sp, #12]
 8003a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a94:	4433      	add	r3, r6
 8003a96:	9309      	str	r3, [sp, #36]	; 0x24
 8003a98:	e767      	b.n	800396a <_svfiprintf_r+0x4e>
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aa2:	e7a5      	b.n	80039f0 <_svfiprintf_r+0xd4>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f04f 0c0a 	mov.w	ip, #10
 8003aaa:	4619      	mov	r1, r3
 8003aac:	3401      	adds	r4, #1
 8003aae:	9305      	str	r3, [sp, #20]
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ab6:	3a30      	subs	r2, #48	; 0x30
 8003ab8:	2a09      	cmp	r2, #9
 8003aba:	d903      	bls.n	8003ac4 <_svfiprintf_r+0x1a8>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0c5      	beq.n	8003a4c <_svfiprintf_r+0x130>
 8003ac0:	9105      	str	r1, [sp, #20]
 8003ac2:	e7c3      	b.n	8003a4c <_svfiprintf_r+0x130>
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003acc:	e7f0      	b.n	8003ab0 <_svfiprintf_r+0x194>
 8003ace:	ab03      	add	r3, sp, #12
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	462a      	mov	r2, r5
 8003ad4:	4638      	mov	r0, r7
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <_svfiprintf_r+0x1fc>)
 8003ad8:	a904      	add	r1, sp, #16
 8003ada:	f3af 8000 	nop.w
 8003ade:	1c42      	adds	r2, r0, #1
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	d1d6      	bne.n	8003a92 <_svfiprintf_r+0x176>
 8003ae4:	89ab      	ldrh	r3, [r5, #12]
 8003ae6:	065b      	lsls	r3, r3, #25
 8003ae8:	f53f af2c 	bmi.w	8003944 <_svfiprintf_r+0x28>
 8003aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aee:	b01d      	add	sp, #116	; 0x74
 8003af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af4:	ab03      	add	r3, sp, #12
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	462a      	mov	r2, r5
 8003afa:	4638      	mov	r0, r7
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <_svfiprintf_r+0x1fc>)
 8003afe:	a904      	add	r1, sp, #16
 8003b00:	f000 f87c 	bl	8003bfc <_printf_i>
 8003b04:	e7eb      	b.n	8003ade <_svfiprintf_r+0x1c2>
 8003b06:	bf00      	nop
 8003b08:	08004f2c 	.word	0x08004f2c
 8003b0c:	08004f32 	.word	0x08004f32
 8003b10:	08004f36 	.word	0x08004f36
 8003b14:	00000000 	.word	0x00000000
 8003b18:	08003865 	.word	0x08003865

08003b1c <_printf_common>:
 8003b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b20:	4616      	mov	r6, r2
 8003b22:	4699      	mov	r9, r3
 8003b24:	688a      	ldr	r2, [r1, #8]
 8003b26:	690b      	ldr	r3, [r1, #16]
 8003b28:	4607      	mov	r7, r0
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	bfb8      	it	lt
 8003b2e:	4613      	movlt	r3, r2
 8003b30:	6033      	str	r3, [r6, #0]
 8003b32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b36:	460c      	mov	r4, r1
 8003b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b3c:	b10a      	cbz	r2, 8003b42 <_printf_common+0x26>
 8003b3e:	3301      	adds	r3, #1
 8003b40:	6033      	str	r3, [r6, #0]
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	0699      	lsls	r1, r3, #26
 8003b46:	bf42      	ittt	mi
 8003b48:	6833      	ldrmi	r3, [r6, #0]
 8003b4a:	3302      	addmi	r3, #2
 8003b4c:	6033      	strmi	r3, [r6, #0]
 8003b4e:	6825      	ldr	r5, [r4, #0]
 8003b50:	f015 0506 	ands.w	r5, r5, #6
 8003b54:	d106      	bne.n	8003b64 <_printf_common+0x48>
 8003b56:	f104 0a19 	add.w	sl, r4, #25
 8003b5a:	68e3      	ldr	r3, [r4, #12]
 8003b5c:	6832      	ldr	r2, [r6, #0]
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	42ab      	cmp	r3, r5
 8003b62:	dc28      	bgt.n	8003bb6 <_printf_common+0x9a>
 8003b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b68:	1e13      	subs	r3, r2, #0
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	bf18      	it	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	0692      	lsls	r2, r2, #26
 8003b72:	d42d      	bmi.n	8003bd0 <_printf_common+0xb4>
 8003b74:	4649      	mov	r1, r9
 8003b76:	4638      	mov	r0, r7
 8003b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b7c:	47c0      	blx	r8
 8003b7e:	3001      	adds	r0, #1
 8003b80:	d020      	beq.n	8003bc4 <_printf_common+0xa8>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	68e5      	ldr	r5, [r4, #12]
 8003b86:	f003 0306 	and.w	r3, r3, #6
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	bf18      	it	ne
 8003b8e:	2500      	movne	r5, #0
 8003b90:	6832      	ldr	r2, [r6, #0]
 8003b92:	f04f 0600 	mov.w	r6, #0
 8003b96:	68a3      	ldr	r3, [r4, #8]
 8003b98:	bf08      	it	eq
 8003b9a:	1aad      	subeq	r5, r5, r2
 8003b9c:	6922      	ldr	r2, [r4, #16]
 8003b9e:	bf08      	it	eq
 8003ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bfc4      	itt	gt
 8003ba8:	1a9b      	subgt	r3, r3, r2
 8003baa:	18ed      	addgt	r5, r5, r3
 8003bac:	341a      	adds	r4, #26
 8003bae:	42b5      	cmp	r5, r6
 8003bb0:	d11a      	bne.n	8003be8 <_printf_common+0xcc>
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	e008      	b.n	8003bc8 <_printf_common+0xac>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4652      	mov	r2, sl
 8003bba:	4649      	mov	r1, r9
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	47c0      	blx	r8
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d103      	bne.n	8003bcc <_printf_common+0xb0>
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bcc:	3501      	adds	r5, #1
 8003bce:	e7c4      	b.n	8003b5a <_printf_common+0x3e>
 8003bd0:	2030      	movs	r0, #48	; 0x30
 8003bd2:	18e1      	adds	r1, r4, r3
 8003bd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bde:	4422      	add	r2, r4
 8003be0:	3302      	adds	r3, #2
 8003be2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003be6:	e7c5      	b.n	8003b74 <_printf_common+0x58>
 8003be8:	2301      	movs	r3, #1
 8003bea:	4622      	mov	r2, r4
 8003bec:	4649      	mov	r1, r9
 8003bee:	4638      	mov	r0, r7
 8003bf0:	47c0      	blx	r8
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d0e6      	beq.n	8003bc4 <_printf_common+0xa8>
 8003bf6:	3601      	adds	r6, #1
 8003bf8:	e7d9      	b.n	8003bae <_printf_common+0x92>
	...

08003bfc <_printf_i>:
 8003bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c00:	7e0f      	ldrb	r7, [r1, #24]
 8003c02:	4691      	mov	r9, r2
 8003c04:	2f78      	cmp	r7, #120	; 0x78
 8003c06:	4680      	mov	r8, r0
 8003c08:	460c      	mov	r4, r1
 8003c0a:	469a      	mov	sl, r3
 8003c0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c12:	d807      	bhi.n	8003c24 <_printf_i+0x28>
 8003c14:	2f62      	cmp	r7, #98	; 0x62
 8003c16:	d80a      	bhi.n	8003c2e <_printf_i+0x32>
 8003c18:	2f00      	cmp	r7, #0
 8003c1a:	f000 80d9 	beq.w	8003dd0 <_printf_i+0x1d4>
 8003c1e:	2f58      	cmp	r7, #88	; 0x58
 8003c20:	f000 80a4 	beq.w	8003d6c <_printf_i+0x170>
 8003c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c2c:	e03a      	b.n	8003ca4 <_printf_i+0xa8>
 8003c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c32:	2b15      	cmp	r3, #21
 8003c34:	d8f6      	bhi.n	8003c24 <_printf_i+0x28>
 8003c36:	a101      	add	r1, pc, #4	; (adr r1, 8003c3c <_printf_i+0x40>)
 8003c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c3c:	08003c95 	.word	0x08003c95
 8003c40:	08003ca9 	.word	0x08003ca9
 8003c44:	08003c25 	.word	0x08003c25
 8003c48:	08003c25 	.word	0x08003c25
 8003c4c:	08003c25 	.word	0x08003c25
 8003c50:	08003c25 	.word	0x08003c25
 8003c54:	08003ca9 	.word	0x08003ca9
 8003c58:	08003c25 	.word	0x08003c25
 8003c5c:	08003c25 	.word	0x08003c25
 8003c60:	08003c25 	.word	0x08003c25
 8003c64:	08003c25 	.word	0x08003c25
 8003c68:	08003db7 	.word	0x08003db7
 8003c6c:	08003cd9 	.word	0x08003cd9
 8003c70:	08003d99 	.word	0x08003d99
 8003c74:	08003c25 	.word	0x08003c25
 8003c78:	08003c25 	.word	0x08003c25
 8003c7c:	08003dd9 	.word	0x08003dd9
 8003c80:	08003c25 	.word	0x08003c25
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003c25 	.word	0x08003c25
 8003c8c:	08003c25 	.word	0x08003c25
 8003c90:	08003da1 	.word	0x08003da1
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	1d1a      	adds	r2, r3, #4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	602a      	str	r2, [r5, #0]
 8003c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0a4      	b.n	8003df2 <_printf_i+0x1f6>
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	6829      	ldr	r1, [r5, #0]
 8003cac:	0606      	lsls	r6, r0, #24
 8003cae:	f101 0304 	add.w	r3, r1, #4
 8003cb2:	d50a      	bpl.n	8003cca <_printf_i+0xce>
 8003cb4:	680e      	ldr	r6, [r1, #0]
 8003cb6:	602b      	str	r3, [r5, #0]
 8003cb8:	2e00      	cmp	r6, #0
 8003cba:	da03      	bge.n	8003cc4 <_printf_i+0xc8>
 8003cbc:	232d      	movs	r3, #45	; 0x2d
 8003cbe:	4276      	negs	r6, r6
 8003cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cc4:	230a      	movs	r3, #10
 8003cc6:	485e      	ldr	r0, [pc, #376]	; (8003e40 <_printf_i+0x244>)
 8003cc8:	e019      	b.n	8003cfe <_printf_i+0x102>
 8003cca:	680e      	ldr	r6, [r1, #0]
 8003ccc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003cd0:	602b      	str	r3, [r5, #0]
 8003cd2:	bf18      	it	ne
 8003cd4:	b236      	sxthne	r6, r6
 8003cd6:	e7ef      	b.n	8003cb8 <_printf_i+0xbc>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	6820      	ldr	r0, [r4, #0]
 8003cdc:	1d19      	adds	r1, r3, #4
 8003cde:	6029      	str	r1, [r5, #0]
 8003ce0:	0601      	lsls	r1, r0, #24
 8003ce2:	d501      	bpl.n	8003ce8 <_printf_i+0xec>
 8003ce4:	681e      	ldr	r6, [r3, #0]
 8003ce6:	e002      	b.n	8003cee <_printf_i+0xf2>
 8003ce8:	0646      	lsls	r6, r0, #25
 8003cea:	d5fb      	bpl.n	8003ce4 <_printf_i+0xe8>
 8003cec:	881e      	ldrh	r6, [r3, #0]
 8003cee:	2f6f      	cmp	r7, #111	; 0x6f
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2308      	moveq	r3, #8
 8003cf4:	230a      	movne	r3, #10
 8003cf6:	4852      	ldr	r0, [pc, #328]	; (8003e40 <_printf_i+0x244>)
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cfe:	6865      	ldr	r5, [r4, #4]
 8003d00:	2d00      	cmp	r5, #0
 8003d02:	bfa8      	it	ge
 8003d04:	6821      	ldrge	r1, [r4, #0]
 8003d06:	60a5      	str	r5, [r4, #8]
 8003d08:	bfa4      	itt	ge
 8003d0a:	f021 0104 	bicge.w	r1, r1, #4
 8003d0e:	6021      	strge	r1, [r4, #0]
 8003d10:	b90e      	cbnz	r6, 8003d16 <_printf_i+0x11a>
 8003d12:	2d00      	cmp	r5, #0
 8003d14:	d04d      	beq.n	8003db2 <_printf_i+0x1b6>
 8003d16:	4615      	mov	r5, r2
 8003d18:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d1c:	fb03 6711 	mls	r7, r3, r1, r6
 8003d20:	5dc7      	ldrb	r7, [r0, r7]
 8003d22:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d26:	4637      	mov	r7, r6
 8003d28:	42bb      	cmp	r3, r7
 8003d2a:	460e      	mov	r6, r1
 8003d2c:	d9f4      	bls.n	8003d18 <_printf_i+0x11c>
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d10b      	bne.n	8003d4a <_printf_i+0x14e>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	07de      	lsls	r6, r3, #31
 8003d36:	d508      	bpl.n	8003d4a <_printf_i+0x14e>
 8003d38:	6923      	ldr	r3, [r4, #16]
 8003d3a:	6861      	ldr	r1, [r4, #4]
 8003d3c:	4299      	cmp	r1, r3
 8003d3e:	bfde      	ittt	le
 8003d40:	2330      	movle	r3, #48	; 0x30
 8003d42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d4a:	1b52      	subs	r2, r2, r5
 8003d4c:	6122      	str	r2, [r4, #16]
 8003d4e:	464b      	mov	r3, r9
 8003d50:	4621      	mov	r1, r4
 8003d52:	4640      	mov	r0, r8
 8003d54:	f8cd a000 	str.w	sl, [sp]
 8003d58:	aa03      	add	r2, sp, #12
 8003d5a:	f7ff fedf 	bl	8003b1c <_printf_common>
 8003d5e:	3001      	adds	r0, #1
 8003d60:	d14c      	bne.n	8003dfc <_printf_i+0x200>
 8003d62:	f04f 30ff 	mov.w	r0, #4294967295
 8003d66:	b004      	add	sp, #16
 8003d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6c:	4834      	ldr	r0, [pc, #208]	; (8003e40 <_printf_i+0x244>)
 8003d6e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d72:	6829      	ldr	r1, [r5, #0]
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d7a:	6029      	str	r1, [r5, #0]
 8003d7c:	061d      	lsls	r5, r3, #24
 8003d7e:	d514      	bpl.n	8003daa <_printf_i+0x1ae>
 8003d80:	07df      	lsls	r7, r3, #31
 8003d82:	bf44      	itt	mi
 8003d84:	f043 0320 	orrmi.w	r3, r3, #32
 8003d88:	6023      	strmi	r3, [r4, #0]
 8003d8a:	b91e      	cbnz	r6, 8003d94 <_printf_i+0x198>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	f023 0320 	bic.w	r3, r3, #32
 8003d92:	6023      	str	r3, [r4, #0]
 8003d94:	2310      	movs	r3, #16
 8003d96:	e7af      	b.n	8003cf8 <_printf_i+0xfc>
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	f043 0320 	orr.w	r3, r3, #32
 8003d9e:	6023      	str	r3, [r4, #0]
 8003da0:	2378      	movs	r3, #120	; 0x78
 8003da2:	4828      	ldr	r0, [pc, #160]	; (8003e44 <_printf_i+0x248>)
 8003da4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003da8:	e7e3      	b.n	8003d72 <_printf_i+0x176>
 8003daa:	0659      	lsls	r1, r3, #25
 8003dac:	bf48      	it	mi
 8003dae:	b2b6      	uxthmi	r6, r6
 8003db0:	e7e6      	b.n	8003d80 <_printf_i+0x184>
 8003db2:	4615      	mov	r5, r2
 8003db4:	e7bb      	b.n	8003d2e <_printf_i+0x132>
 8003db6:	682b      	ldr	r3, [r5, #0]
 8003db8:	6826      	ldr	r6, [r4, #0]
 8003dba:	1d18      	adds	r0, r3, #4
 8003dbc:	6961      	ldr	r1, [r4, #20]
 8003dbe:	6028      	str	r0, [r5, #0]
 8003dc0:	0635      	lsls	r5, r6, #24
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	d501      	bpl.n	8003dca <_printf_i+0x1ce>
 8003dc6:	6019      	str	r1, [r3, #0]
 8003dc8:	e002      	b.n	8003dd0 <_printf_i+0x1d4>
 8003dca:	0670      	lsls	r0, r6, #25
 8003dcc:	d5fb      	bpl.n	8003dc6 <_printf_i+0x1ca>
 8003dce:	8019      	strh	r1, [r3, #0]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	4615      	mov	r5, r2
 8003dd4:	6123      	str	r3, [r4, #16]
 8003dd6:	e7ba      	b.n	8003d4e <_printf_i+0x152>
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	2100      	movs	r1, #0
 8003ddc:	1d1a      	adds	r2, r3, #4
 8003dde:	602a      	str	r2, [r5, #0]
 8003de0:	681d      	ldr	r5, [r3, #0]
 8003de2:	6862      	ldr	r2, [r4, #4]
 8003de4:	4628      	mov	r0, r5
 8003de6:	f000 f82f 	bl	8003e48 <memchr>
 8003dea:	b108      	cbz	r0, 8003df0 <_printf_i+0x1f4>
 8003dec:	1b40      	subs	r0, r0, r5
 8003dee:	6060      	str	r0, [r4, #4]
 8003df0:	6863      	ldr	r3, [r4, #4]
 8003df2:	6123      	str	r3, [r4, #16]
 8003df4:	2300      	movs	r3, #0
 8003df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dfa:	e7a8      	b.n	8003d4e <_printf_i+0x152>
 8003dfc:	462a      	mov	r2, r5
 8003dfe:	4649      	mov	r1, r9
 8003e00:	4640      	mov	r0, r8
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	47d0      	blx	sl
 8003e06:	3001      	adds	r0, #1
 8003e08:	d0ab      	beq.n	8003d62 <_printf_i+0x166>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	079b      	lsls	r3, r3, #30
 8003e0e:	d413      	bmi.n	8003e38 <_printf_i+0x23c>
 8003e10:	68e0      	ldr	r0, [r4, #12]
 8003e12:	9b03      	ldr	r3, [sp, #12]
 8003e14:	4298      	cmp	r0, r3
 8003e16:	bfb8      	it	lt
 8003e18:	4618      	movlt	r0, r3
 8003e1a:	e7a4      	b.n	8003d66 <_printf_i+0x16a>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	4632      	mov	r2, r6
 8003e20:	4649      	mov	r1, r9
 8003e22:	4640      	mov	r0, r8
 8003e24:	47d0      	blx	sl
 8003e26:	3001      	adds	r0, #1
 8003e28:	d09b      	beq.n	8003d62 <_printf_i+0x166>
 8003e2a:	3501      	adds	r5, #1
 8003e2c:	68e3      	ldr	r3, [r4, #12]
 8003e2e:	9903      	ldr	r1, [sp, #12]
 8003e30:	1a5b      	subs	r3, r3, r1
 8003e32:	42ab      	cmp	r3, r5
 8003e34:	dcf2      	bgt.n	8003e1c <_printf_i+0x220>
 8003e36:	e7eb      	b.n	8003e10 <_printf_i+0x214>
 8003e38:	2500      	movs	r5, #0
 8003e3a:	f104 0619 	add.w	r6, r4, #25
 8003e3e:	e7f5      	b.n	8003e2c <_printf_i+0x230>
 8003e40:	08004f3d 	.word	0x08004f3d
 8003e44:	08004f4e 	.word	0x08004f4e

08003e48 <memchr>:
 8003e48:	4603      	mov	r3, r0
 8003e4a:	b510      	push	{r4, lr}
 8003e4c:	b2c9      	uxtb	r1, r1
 8003e4e:	4402      	add	r2, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	d101      	bne.n	8003e5a <memchr+0x12>
 8003e56:	2000      	movs	r0, #0
 8003e58:	e003      	b.n	8003e62 <memchr+0x1a>
 8003e5a:	7804      	ldrb	r4, [r0, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	428c      	cmp	r4, r1
 8003e60:	d1f6      	bne.n	8003e50 <memchr+0x8>
 8003e62:	bd10      	pop	{r4, pc}

08003e64 <memcpy>:
 8003e64:	440a      	add	r2, r1
 8003e66:	4291      	cmp	r1, r2
 8003e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e6c:	d100      	bne.n	8003e70 <memcpy+0xc>
 8003e6e:	4770      	bx	lr
 8003e70:	b510      	push	{r4, lr}
 8003e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e76:	4291      	cmp	r1, r2
 8003e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e7c:	d1f9      	bne.n	8003e72 <memcpy+0xe>
 8003e7e:	bd10      	pop	{r4, pc}

08003e80 <memmove>:
 8003e80:	4288      	cmp	r0, r1
 8003e82:	b510      	push	{r4, lr}
 8003e84:	eb01 0402 	add.w	r4, r1, r2
 8003e88:	d902      	bls.n	8003e90 <memmove+0x10>
 8003e8a:	4284      	cmp	r4, r0
 8003e8c:	4623      	mov	r3, r4
 8003e8e:	d807      	bhi.n	8003ea0 <memmove+0x20>
 8003e90:	1e43      	subs	r3, r0, #1
 8003e92:	42a1      	cmp	r1, r4
 8003e94:	d008      	beq.n	8003ea8 <memmove+0x28>
 8003e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e9e:	e7f8      	b.n	8003e92 <memmove+0x12>
 8003ea0:	4601      	mov	r1, r0
 8003ea2:	4402      	add	r2, r0
 8003ea4:	428a      	cmp	r2, r1
 8003ea6:	d100      	bne.n	8003eaa <memmove+0x2a>
 8003ea8:	bd10      	pop	{r4, pc}
 8003eaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eb2:	e7f7      	b.n	8003ea4 <memmove+0x24>

08003eb4 <_free_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	2900      	cmp	r1, #0
 8003eba:	d040      	beq.n	8003f3e <_free_r+0x8a>
 8003ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec0:	1f0c      	subs	r4, r1, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bfb8      	it	lt
 8003ec6:	18e4      	addlt	r4, r4, r3
 8003ec8:	f000 f910 	bl	80040ec <__malloc_lock>
 8003ecc:	4a1c      	ldr	r2, [pc, #112]	; (8003f40 <_free_r+0x8c>)
 8003ece:	6813      	ldr	r3, [r2, #0]
 8003ed0:	b933      	cbnz	r3, 8003ee0 <_free_r+0x2c>
 8003ed2:	6063      	str	r3, [r4, #4]
 8003ed4:	6014      	str	r4, [r2, #0]
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003edc:	f000 b90c 	b.w	80040f8 <__malloc_unlock>
 8003ee0:	42a3      	cmp	r3, r4
 8003ee2:	d908      	bls.n	8003ef6 <_free_r+0x42>
 8003ee4:	6820      	ldr	r0, [r4, #0]
 8003ee6:	1821      	adds	r1, r4, r0
 8003ee8:	428b      	cmp	r3, r1
 8003eea:	bf01      	itttt	eq
 8003eec:	6819      	ldreq	r1, [r3, #0]
 8003eee:	685b      	ldreq	r3, [r3, #4]
 8003ef0:	1809      	addeq	r1, r1, r0
 8003ef2:	6021      	streq	r1, [r4, #0]
 8003ef4:	e7ed      	b.n	8003ed2 <_free_r+0x1e>
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	b10b      	cbz	r3, 8003f00 <_free_r+0x4c>
 8003efc:	42a3      	cmp	r3, r4
 8003efe:	d9fa      	bls.n	8003ef6 <_free_r+0x42>
 8003f00:	6811      	ldr	r1, [r2, #0]
 8003f02:	1850      	adds	r0, r2, r1
 8003f04:	42a0      	cmp	r0, r4
 8003f06:	d10b      	bne.n	8003f20 <_free_r+0x6c>
 8003f08:	6820      	ldr	r0, [r4, #0]
 8003f0a:	4401      	add	r1, r0
 8003f0c:	1850      	adds	r0, r2, r1
 8003f0e:	4283      	cmp	r3, r0
 8003f10:	6011      	str	r1, [r2, #0]
 8003f12:	d1e0      	bne.n	8003ed6 <_free_r+0x22>
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4401      	add	r1, r0
 8003f1a:	6011      	str	r1, [r2, #0]
 8003f1c:	6053      	str	r3, [r2, #4]
 8003f1e:	e7da      	b.n	8003ed6 <_free_r+0x22>
 8003f20:	d902      	bls.n	8003f28 <_free_r+0x74>
 8003f22:	230c      	movs	r3, #12
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	e7d6      	b.n	8003ed6 <_free_r+0x22>
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	1821      	adds	r1, r4, r0
 8003f2c:	428b      	cmp	r3, r1
 8003f2e:	bf01      	itttt	eq
 8003f30:	6819      	ldreq	r1, [r3, #0]
 8003f32:	685b      	ldreq	r3, [r3, #4]
 8003f34:	1809      	addeq	r1, r1, r0
 8003f36:	6021      	streq	r1, [r4, #0]
 8003f38:	6063      	str	r3, [r4, #4]
 8003f3a:	6054      	str	r4, [r2, #4]
 8003f3c:	e7cb      	b.n	8003ed6 <_free_r+0x22>
 8003f3e:	bd38      	pop	{r3, r4, r5, pc}
 8003f40:	200005a4 	.word	0x200005a4

08003f44 <sbrk_aligned>:
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	4e0e      	ldr	r6, [pc, #56]	; (8003f80 <sbrk_aligned+0x3c>)
 8003f48:	460c      	mov	r4, r1
 8003f4a:	6831      	ldr	r1, [r6, #0]
 8003f4c:	4605      	mov	r5, r0
 8003f4e:	b911      	cbnz	r1, 8003f56 <sbrk_aligned+0x12>
 8003f50:	f000 f8bc 	bl	80040cc <_sbrk_r>
 8003f54:	6030      	str	r0, [r6, #0]
 8003f56:	4621      	mov	r1, r4
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f000 f8b7 	bl	80040cc <_sbrk_r>
 8003f5e:	1c43      	adds	r3, r0, #1
 8003f60:	d00a      	beq.n	8003f78 <sbrk_aligned+0x34>
 8003f62:	1cc4      	adds	r4, r0, #3
 8003f64:	f024 0403 	bic.w	r4, r4, #3
 8003f68:	42a0      	cmp	r0, r4
 8003f6a:	d007      	beq.n	8003f7c <sbrk_aligned+0x38>
 8003f6c:	1a21      	subs	r1, r4, r0
 8003f6e:	4628      	mov	r0, r5
 8003f70:	f000 f8ac 	bl	80040cc <_sbrk_r>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d101      	bne.n	8003f7c <sbrk_aligned+0x38>
 8003f78:	f04f 34ff 	mov.w	r4, #4294967295
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	200005a8 	.word	0x200005a8

08003f84 <_malloc_r>:
 8003f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f88:	1ccd      	adds	r5, r1, #3
 8003f8a:	f025 0503 	bic.w	r5, r5, #3
 8003f8e:	3508      	adds	r5, #8
 8003f90:	2d0c      	cmp	r5, #12
 8003f92:	bf38      	it	cc
 8003f94:	250c      	movcc	r5, #12
 8003f96:	2d00      	cmp	r5, #0
 8003f98:	4607      	mov	r7, r0
 8003f9a:	db01      	blt.n	8003fa0 <_malloc_r+0x1c>
 8003f9c:	42a9      	cmp	r1, r5
 8003f9e:	d905      	bls.n	8003fac <_malloc_r+0x28>
 8003fa0:	230c      	movs	r3, #12
 8003fa2:	2600      	movs	r6, #0
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fac:	4e2e      	ldr	r6, [pc, #184]	; (8004068 <_malloc_r+0xe4>)
 8003fae:	f000 f89d 	bl	80040ec <__malloc_lock>
 8003fb2:	6833      	ldr	r3, [r6, #0]
 8003fb4:	461c      	mov	r4, r3
 8003fb6:	bb34      	cbnz	r4, 8004006 <_malloc_r+0x82>
 8003fb8:	4629      	mov	r1, r5
 8003fba:	4638      	mov	r0, r7
 8003fbc:	f7ff ffc2 	bl	8003f44 <sbrk_aligned>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	d14d      	bne.n	8004062 <_malloc_r+0xde>
 8003fc6:	6834      	ldr	r4, [r6, #0]
 8003fc8:	4626      	mov	r6, r4
 8003fca:	2e00      	cmp	r6, #0
 8003fcc:	d140      	bne.n	8004050 <_malloc_r+0xcc>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	4638      	mov	r0, r7
 8003fd4:	eb04 0803 	add.w	r8, r4, r3
 8003fd8:	f000 f878 	bl	80040cc <_sbrk_r>
 8003fdc:	4580      	cmp	r8, r0
 8003fde:	d13a      	bne.n	8004056 <_malloc_r+0xd2>
 8003fe0:	6821      	ldr	r1, [r4, #0]
 8003fe2:	3503      	adds	r5, #3
 8003fe4:	1a6d      	subs	r5, r5, r1
 8003fe6:	f025 0503 	bic.w	r5, r5, #3
 8003fea:	3508      	adds	r5, #8
 8003fec:	2d0c      	cmp	r5, #12
 8003fee:	bf38      	it	cc
 8003ff0:	250c      	movcc	r5, #12
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	f7ff ffa5 	bl	8003f44 <sbrk_aligned>
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d02b      	beq.n	8004056 <_malloc_r+0xd2>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	442b      	add	r3, r5
 8004002:	6023      	str	r3, [r4, #0]
 8004004:	e00e      	b.n	8004024 <_malloc_r+0xa0>
 8004006:	6822      	ldr	r2, [r4, #0]
 8004008:	1b52      	subs	r2, r2, r5
 800400a:	d41e      	bmi.n	800404a <_malloc_r+0xc6>
 800400c:	2a0b      	cmp	r2, #11
 800400e:	d916      	bls.n	800403e <_malloc_r+0xba>
 8004010:	1961      	adds	r1, r4, r5
 8004012:	42a3      	cmp	r3, r4
 8004014:	6025      	str	r5, [r4, #0]
 8004016:	bf18      	it	ne
 8004018:	6059      	strne	r1, [r3, #4]
 800401a:	6863      	ldr	r3, [r4, #4]
 800401c:	bf08      	it	eq
 800401e:	6031      	streq	r1, [r6, #0]
 8004020:	5162      	str	r2, [r4, r5]
 8004022:	604b      	str	r3, [r1, #4]
 8004024:	4638      	mov	r0, r7
 8004026:	f104 060b 	add.w	r6, r4, #11
 800402a:	f000 f865 	bl	80040f8 <__malloc_unlock>
 800402e:	f026 0607 	bic.w	r6, r6, #7
 8004032:	1d23      	adds	r3, r4, #4
 8004034:	1af2      	subs	r2, r6, r3
 8004036:	d0b6      	beq.n	8003fa6 <_malloc_r+0x22>
 8004038:	1b9b      	subs	r3, r3, r6
 800403a:	50a3      	str	r3, [r4, r2]
 800403c:	e7b3      	b.n	8003fa6 <_malloc_r+0x22>
 800403e:	6862      	ldr	r2, [r4, #4]
 8004040:	42a3      	cmp	r3, r4
 8004042:	bf0c      	ite	eq
 8004044:	6032      	streq	r2, [r6, #0]
 8004046:	605a      	strne	r2, [r3, #4]
 8004048:	e7ec      	b.n	8004024 <_malloc_r+0xa0>
 800404a:	4623      	mov	r3, r4
 800404c:	6864      	ldr	r4, [r4, #4]
 800404e:	e7b2      	b.n	8003fb6 <_malloc_r+0x32>
 8004050:	4634      	mov	r4, r6
 8004052:	6876      	ldr	r6, [r6, #4]
 8004054:	e7b9      	b.n	8003fca <_malloc_r+0x46>
 8004056:	230c      	movs	r3, #12
 8004058:	4638      	mov	r0, r7
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	f000 f84c 	bl	80040f8 <__malloc_unlock>
 8004060:	e7a1      	b.n	8003fa6 <_malloc_r+0x22>
 8004062:	6025      	str	r5, [r4, #0]
 8004064:	e7de      	b.n	8004024 <_malloc_r+0xa0>
 8004066:	bf00      	nop
 8004068:	200005a4 	.word	0x200005a4

0800406c <_realloc_r>:
 800406c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004070:	4680      	mov	r8, r0
 8004072:	4614      	mov	r4, r2
 8004074:	460e      	mov	r6, r1
 8004076:	b921      	cbnz	r1, 8004082 <_realloc_r+0x16>
 8004078:	4611      	mov	r1, r2
 800407a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800407e:	f7ff bf81 	b.w	8003f84 <_malloc_r>
 8004082:	b92a      	cbnz	r2, 8004090 <_realloc_r+0x24>
 8004084:	f7ff ff16 	bl	8003eb4 <_free_r>
 8004088:	4625      	mov	r5, r4
 800408a:	4628      	mov	r0, r5
 800408c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004090:	f000 f838 	bl	8004104 <_malloc_usable_size_r>
 8004094:	4284      	cmp	r4, r0
 8004096:	4607      	mov	r7, r0
 8004098:	d802      	bhi.n	80040a0 <_realloc_r+0x34>
 800409a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800409e:	d812      	bhi.n	80040c6 <_realloc_r+0x5a>
 80040a0:	4621      	mov	r1, r4
 80040a2:	4640      	mov	r0, r8
 80040a4:	f7ff ff6e 	bl	8003f84 <_malloc_r>
 80040a8:	4605      	mov	r5, r0
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d0ed      	beq.n	800408a <_realloc_r+0x1e>
 80040ae:	42bc      	cmp	r4, r7
 80040b0:	4622      	mov	r2, r4
 80040b2:	4631      	mov	r1, r6
 80040b4:	bf28      	it	cs
 80040b6:	463a      	movcs	r2, r7
 80040b8:	f7ff fed4 	bl	8003e64 <memcpy>
 80040bc:	4631      	mov	r1, r6
 80040be:	4640      	mov	r0, r8
 80040c0:	f7ff fef8 	bl	8003eb4 <_free_r>
 80040c4:	e7e1      	b.n	800408a <_realloc_r+0x1e>
 80040c6:	4635      	mov	r5, r6
 80040c8:	e7df      	b.n	800408a <_realloc_r+0x1e>
	...

080040cc <_sbrk_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	2300      	movs	r3, #0
 80040d0:	4d05      	ldr	r5, [pc, #20]	; (80040e8 <_sbrk_r+0x1c>)
 80040d2:	4604      	mov	r4, r0
 80040d4:	4608      	mov	r0, r1
 80040d6:	602b      	str	r3, [r5, #0]
 80040d8:	f7fd f840 	bl	800115c <_sbrk>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_sbrk_r+0x1a>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_sbrk_r+0x1a>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	200005ac 	.word	0x200005ac

080040ec <__malloc_lock>:
 80040ec:	4801      	ldr	r0, [pc, #4]	; (80040f4 <__malloc_lock+0x8>)
 80040ee:	f000 b811 	b.w	8004114 <__retarget_lock_acquire_recursive>
 80040f2:	bf00      	nop
 80040f4:	200005b0 	.word	0x200005b0

080040f8 <__malloc_unlock>:
 80040f8:	4801      	ldr	r0, [pc, #4]	; (8004100 <__malloc_unlock+0x8>)
 80040fa:	f000 b80c 	b.w	8004116 <__retarget_lock_release_recursive>
 80040fe:	bf00      	nop
 8004100:	200005b0 	.word	0x200005b0

08004104 <_malloc_usable_size_r>:
 8004104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004108:	1f18      	subs	r0, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	bfbc      	itt	lt
 800410e:	580b      	ldrlt	r3, [r1, r0]
 8004110:	18c0      	addlt	r0, r0, r3
 8004112:	4770      	bx	lr

08004114 <__retarget_lock_acquire_recursive>:
 8004114:	4770      	bx	lr

08004116 <__retarget_lock_release_recursive>:
 8004116:	4770      	bx	lr

08004118 <_init>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	bf00      	nop
 800411c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411e:	bc08      	pop	{r3}
 8004120:	469e      	mov	lr, r3
 8004122:	4770      	bx	lr

08004124 <_fini>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	bf00      	nop
 8004128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412a:	bc08      	pop	{r3}
 800412c:	469e      	mov	lr, r3
 800412e:	4770      	bx	lr
